{"version":3,"sources":["serviceWorker.ts","constants/constants.tsx","components/splash.tsx","components/message.tsx","components/main.tsx","functions/fetchfunctions.tsx","components/user.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","xheader","Content-Type","Splash","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","PIN","React","createRef","state","redoAuth","isAuthenticated","tryPin","bind","assertThisInitialized","tryPinQuick","pin","length","_this2","cbTryPinB","authFlag","current","value","setState","authenticatePin","_this3","react_default","a","createElement","react_router","to","className","Image","src","style","display","InputGroup","FormControl","autoFocus","ref","placeholder","aria-label","aria-describedby","onChange","Append","cursor","onClick","Text","Fragment","color","Component","MonkeyMessage","monkeyImage","getMonkeyImage","monkeyDir","Math","floor","random","toString","width","height","Modal","animation","centered","show","Header","Title","Body","textAlign","fluid","roundedCircle","Footer","Button","variant","monkeyDanceToggle","logOff","emoji","require","searchEmoji","itemName","itemName_lcase","toLowerCase","substr","slice","searchList","search","key","includes","Main","newItem","user","monkeyDance","ui","updateUser","monkeyChange","itemStatusList","distinctItems","monkeyData","monkeyItemAction","lookupStatus","addMonkeyItem","monkeyDo","monkeyAll","status","filter","el","statusID","parseInt","actionType","action_type","status_verb","status_active","event","eventitemOrdinal","preventDefault","eventVal","target","itemOrdinal","newState","lookupObj","itemActionType","itemStatus","itemStatusID","itemStatusVerb","itemStatusActive","itemUserID","user_id","itemUserName","name","callback","mData","new_monkeyData","i","groceryListItems","push","itemNew","itemID","grocery_list_id","itemDate","date","item","itemCount","count","itemCode","code","itemNotes","notes","status_id","username","new_ui","groceryItemStatus","distinctGroceryListItems","fetch","method","headers","body","JSON","stringify","then","res","json","returnjson","success","data","newItemString","_this4","newItemDetails","split","newMonkeyItemList","newQuantity","newNotes","charAt","toUpperCase","Date","getInstance","clear","userParams_state","_this5","monkeyDataVar","console","log","getMonkeyData","alert","_this6","newMonkeyState","monkeyAllStatus","_this7","_this8","message","Navbar","fixed","sticky","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","lib","selectHintOnEnter","options","clearButton","labelKey","emptyLabel","typeahead","getInput","ListGroup","map","ListGroupItem","alignItems","emojify","Form","Control","as","isSame","action_sameuser","action_new","lookup_item","k","Nav","verticalAlign","NavItem","Link","alt","visibility","fontWeight","User","userName","email","sms","notify","changeUser","needSave","updateUserLocal","params","checked","onSubmit","Card","Group","react_router_dom","disabled","type","Row","controlId","Label","column","sm","Col","defaultValue","span","offset","Check","label","defaultChecked","PrivateRoute","component","rest","objectWithoutProperties","assign","render","AppContainer","auth","validatePin","userParams","newUser","exact","path","components_splash","src_PrivateRoute","ReactDOM","src_AppContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01bcb40f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n//export const restAPIURL = 'http://nodeserver:8080';\r\n//export const restAPIURL = 'http://localhost:3000';\r\nexport const restAPIURL = '';\r\n\r\nexport const xheader = {\r\n    \"Content-Type\": \"application/json\"\r\n};\r\n\r\nexport interface ImMonkeyData {\r\n    groceryListItems: Array<ImMonkeyData_GroceryListItems>;\r\n    users: Array<ImMonkeyData_Users>;\r\n    groceryItemStatus: Array<ImMonkeyData_Status>;\r\n    distinctGroceryListItems: Array<ImMonkeyData_Lookup>;\r\n};\r\n\r\nexport interface ImMonkeyData_Users {\r\n    user_id: number;\r\n    name: string;\r\n    pin?: string;\r\n    email?: string;\r\n    sms?: string;\r\n    notify?: boolean;\r\n};\r\n\r\nexport interface ImMonkeyData_Status {\r\n    statusID: number;\r\n    status: string;\r\n    action_new: boolean;\r\n    action_sameuser: boolean;\r\n    action_type: number;\r\n    status_verb: string;\r\n    status_active: boolean;\r\n};\r\n\r\nexport interface ImMonkeyData_Lookup {\r\n    item: string;\r\n};\r\n\r\nexport interface ImMonkeyData_GroceryListItems {\r\n    grocery_list_id: number;\r\n    date: string;\r\n    item: string;\r\n    count: number;\r\n    code: string;\r\n    notes: string;\r\n    status_id: number;\r\n    status: string;\r\n    status_verb: string;\r\n    status_active: boolean;\r\n    user_id: number;\r\n    username: string;\r\n};\r\n\r\nexport interface ImMonkeyData_State {\r\n    itemNew: boolean;\r\n    itemActionType: number;\r\n    itemID: number;\r\n    itemDate: string;\r\n    itemName: string;\r\n    itemCount: number;\r\n    itemCode: string;\r\n    itemNotes: string;\r\n    itemStatusID: number;\r\n    itemStatus: string;\r\n    itemStatusVerb: string;\r\n    itemStatusActive: boolean;\r\n    itemUserID: number;\r\n    itemUserName: string;\r\n};\r\n","import React from 'react';\r\nimport { Image, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './splash.css';\r\nimport '../functions/fetchfunctions';\r\n\r\n\r\ninterface IMyStateInterface {\r\n    redoAuth: boolean,\r\n}\r\n\r\ninterface IMyPropsInterface {\r\n    isAuthenticated: boolean,\r\n    authenticatePin: Function,\r\n}\r\n\r\nclass Splash extends React.Component<IMyPropsInterface, IMyStateInterface>{\r\n    private PIN: any;\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);    \r\n        this.PIN = React.createRef();\r\n        this.state = {\r\n            redoAuth: this.props.isAuthenticated,\r\n        };\r\n        this.tryPin = this.tryPin.bind(this);\r\n        this.tryPinQuick = this.tryPinQuick.bind(this);\r\n    }\r\n\r\n    tryPinQuick(pin: string) {\r\n        if (pin.length === 4) {this.tryPin(pin)}\r\n    }\r\n\r\n    tryPin(pin: string) {\r\n        const cbTryPin = (authFlag: boolean) => {\r\n            if (this.PIN.current) {this.PIN.current.value = ''};\r\n            if (!authFlag) { this.setState(() => { return { redoAuth: !authFlag } }) };\r\n        }\r\n        const cbTryPinB = cbTryPin.bind(this);\r\n        this.props.authenticatePin(pin, cbTryPinB);      \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            !this.props.isAuthenticated ?\r\n            < div className=\"Splash\" >\r\n                <br />\r\n                <Image className=\"Image\" src='./images/grocerymonkey.jpg' />\r\n                <br />\r\n                <br />\r\n                <h1>Grocery Monkey</h1>\r\n                <br />\r\n                <div style={{ display: \"inline-block\" }}>\r\n                    <InputGroup >\r\n                            <FormControl\r\n                                autoFocus\r\n                                ref={this.PIN}\r\n                                placeholder=\"User PIN\"\r\n                                aria-label=\"User PIN\"\r\n                                aria-describedby=\"basic-addon1\"\r\n                                onChange={()=>this.tryPinQuick(this.PIN.current.value)}\r\n                            />\r\n                            <InputGroup.Append style={{ cursor: \"pointer\" }} onClick={() => { this.tryPin(this.PIN.current.value) }}>\r\n                            <InputGroup.Text>Login</InputGroup.Text>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                    {(this.state.redoAuth) ? <><br /><span style={{ color: \"darkred\" }}><h3>INVALID PIN</h3></span></> : null}\r\n                </div>\r\n                </div >\r\n                : <Redirect to=\"/main\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Splash;\r\n","import React from 'react';\r\nimport { Button, Modal, Image } from 'react-bootstrap';\r\nconst monkeyDir: string = '/images/monkey';\r\n\r\n\r\ninterface Im_MonkeyMessage_Props {\r\n    show: boolean;\r\n    monkeyDanceToggle: any;\r\n    logOff: any;\r\n}\r\n\r\ninterface Im_MonkeyMessage_State {\r\n    monkeyImage: string;\r\n}\r\n\r\n\r\nclass MonkeyMessage extends React.Component<Im_MonkeyMessage_Props, Im_MonkeyMessage_State> {\r\n    constructor(props: Im_MonkeyMessage_Props) {\r\n        super(props);\r\n        this.state = { monkeyImage: ''};\r\n        this.getMonkeyImage = this.getMonkeyImage.bind(this);\r\n    }\r\n\r\n    getMonkeyImage(): string {\r\n        var monkeyImageString: string;\r\n        var monkeyImageDirLength: number = 1;\r\n        monkeyImageString = monkeyDir + '/monkey' + Math.floor(1+(Math.random() * monkeyImageDirLength)).toString() + '.gif';\r\n        return monkeyImageString;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState(() => { return { monkeyImage: this.getMonkeyImage() } });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width:\"90%\",height:\"50%\"}}>\r\n                <Modal animation centered show={this.props.show} >\r\n                        <Modal.Header >\r\n                            <Modal.Title>You are a Grocery Monkey!</Modal.Title>\r\n                        </Modal.Header>\r\n                    <Modal.Body style={{ textAlign: \"center\" }}>\r\n                        <div style={{ width: \"100%}\" }}>\r\n                            <Image fluid roundedCircle src={this.state.monkeyImage} />\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.props.monkeyDanceToggle}>\r\n                            More Monkey Stuff\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.props.logOff}>\r\n                            No More Monkey\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonkeyMessage;\r\n","import React from 'react';\r\nimport { Navbar, Nav, NavItem, Form, InputGroup, ListGroup, Button, Image } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport './main.css';\r\nimport { getAllMonkeyData, updateMonkeyData } from '../functions/fetchfunctions';\r\nimport MonkeyMessage from './message';\r\nimport { ListGroupItem } from 'react-bootstrap';\r\nimport { ImMonkeyData, ImMonkeyData_State, ImMonkeyData_Lookup, ImMonkeyData_Status, ImMonkeyData_Users } from '../constants/constants';\r\nvar emoji = require('node-emoji');\r\n\r\ninterface IMyuiInterface {\r\n    updateUser: boolean;\r\n    monkeyChange: boolean;\r\n    itemStatusList: Array<ImMonkeyData_Status>;\r\n    distinctItems: Array<ImMonkeyData_Lookup>;\r\n};\r\n\r\ninterface IMyPropsInterface {\r\n    isAuthenticated: boolean;\r\n    user: ImMonkeyData_Users;\r\n    logOff():void;\r\n};\r\n\r\ninterface IMyStateInterface {\r\n    isAuthenticated: boolean;\r\n    user: ImMonkeyData_Users;\r\n    ui: IMyuiInterface;\r\n    monkeyData: Array<ImMonkeyData_State>;\r\n    monkeyDance: boolean;\r\n};\r\n\r\nconst searchEmoji = (itemName: String): string => {\r\n    var itemName_lcase = itemName.toLowerCase();\r\n    if (itemName_lcase.substr(itemName_lcase.length - 1) === 's') {itemName_lcase=itemName.slice(0,-1)}\r\n    var searchList = emoji.search(itemName_lcase.toLowerCase());\r\n    if (searchList.length) {\r\n        return ':' + searchList[0].key + ':';\r\n    } else {\r\n        if (itemName_lcase.includes('natural')) {\r\n            return ':beer:';\r\n        } else {\r\n            return ':shopping_trolley:';\r\n        }\r\n    }\r\n}\r\n\r\nclass Main extends React.Component<IMyPropsInterface, IMyStateInterface> {\r\n    private newItem: any;\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthenticated: props.isAuthenticated,\r\n            user: props.user,\r\n            monkeyDance:false,\r\n            ui: {\r\n                updateUser: false,\r\n                monkeyChange: false,\r\n                itemStatusList: [],\r\n                distinctItems: [],\r\n            },\r\n            monkeyData: [],\r\n        }\r\n        this.newItem = React.createRef();\r\n        this.monkeyItemAction = this.monkeyItemAction.bind(this);\r\n        this.lookupStatus = this.lookupStatus.bind(this);\r\n        this.addMonkeyItem = this.addMonkeyItem.bind(this);\r\n        this.monkeyDo = this.monkeyDo.bind(this);\r\n        this.monkeyAll = this.monkeyAll.bind(this);\r\n        this.monkeyDanceToggle = this.monkeyDanceToggle.bind(this);\r\n    }\r\n\r\n    lookupStatus(status: string): any {\r\n        var lookupStatus: Array<ImMonkeyData_Status>;\r\n        lookupStatus = this.state.ui.itemStatusList.filter((el) => (el.statusID === parseInt(status)));\r\n        return lookupStatus.length ? {\r\n            actionType: lookupStatus[0].action_type,\r\n            status: lookupStatus[0].status,\r\n            status_verb: lookupStatus[0].status_verb,\r\n            status_active: lookupStatus[0].status_active,\r\n        }\r\n            : { actionType: 0, status: 0, status_verb:'', status_active: false };\r\n    }\r\n\r\n    monkeyItemAction(event: any, eventitemOrdinal: number): void {\r\n        event.preventDefault();\r\n        const eventVal: string = event.target.value;\r\n        const itemOrdinal: number = eventitemOrdinal;\r\n        var newState: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n        var lookupObj: any = this.lookupStatus(eventVal);\r\n\r\n        //console.log(lookupObj);\r\n        newState[itemOrdinal].itemActionType = lookupObj.actionType;\r\n        newState[itemOrdinal].itemStatus = lookupObj.status;\r\n        newState[itemOrdinal].itemStatusID = parseInt(eventVal);\r\n        newState[itemOrdinal].itemStatusVerb = lookupObj.status_verb;\r\n        newState[itemOrdinal].itemStatusActive = lookupObj.status_active;\r\n        newState[itemOrdinal].itemUserID = this.state.user.user_id;\r\n        newState[itemOrdinal].itemUserName = this.state.user.name;\r\n\r\n        this.setState(() => {\r\n            return {\r\n                monkeyData: newState, ui: {\r\n                    updateUser: this.state.ui.updateUser,\r\n                    itemStatusList: this.state.ui.itemStatusList,\r\n                    distinctItems: this.state.ui.distinctItems,\r\n                    monkeyChange: true\r\n                } } });\r\n    }\r\n\r\n\r\n    getMonkeyData(): void {\r\n        const getMonkeyDataCB = (mData: ImMonkeyData) => {\r\n            var new_monkeyData: Array<ImMonkeyData_State> = [];\r\n            for (var i = 0; i < mData.groceryListItems.length; i++) {\r\n                new_monkeyData.push(\r\n                    {\r\n                        itemNew: false,\r\n                        itemActionType: 0,\r\n                        itemID: mData.groceryListItems[i].grocery_list_id,\r\n                        itemDate: mData.groceryListItems[i].date,\r\n                        itemName: mData.groceryListItems[i].item,\r\n                        itemCount: mData.groceryListItems[i].count,\r\n                        itemCode: mData.groceryListItems[i].code,\r\n                        itemNotes: mData.groceryListItems[i].notes,\r\n                        itemStatusID: mData.groceryListItems[i].status_id,\r\n                        itemStatus: mData.groceryListItems[i].status,\r\n                        itemStatusVerb: mData.groceryListItems[i].status_verb,\r\n                        itemStatusActive: mData.groceryListItems[i].status_active,\r\n                        itemUserID: mData.groceryListItems[i].user_id,\r\n                        itemUserName: mData.groceryListItems[i].username,\r\n                    }\r\n                )\r\n            }\r\n            const new_ui: IMyuiInterface = {\r\n                updateUser: false,\r\n                monkeyChange: false,\r\n                itemStatusList: mData.groceryItemStatus,\r\n                distinctItems: mData.distinctGroceryListItems,\r\n            };\r\n            this.setState(() => { return { monkeyData: new_monkeyData, ui: new_ui } });\r\n        }\r\n        getAllMonkeyData(this.state.isAuthenticated, getMonkeyDataCB.bind(this));\r\n    }\r\n\r\n    addMonkeyItem(newItemString:string) {\r\n        \r\n        if (newItemString.length > 0) {\r\n            var newItemDetails: Array<string> = newItemString.split(',');\r\n            var newMonkeyItemList: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n            var newItem: string = '';\r\n            var newQuantity: number = 0;\r\n            var newNotes: string = '';\r\n\r\n            newItem = newItemDetails[0].charAt(0).toUpperCase() + newItemDetails[0].slice(1).toLowerCase();\r\n\r\n            if (newItemDetails.length === 2) { newQuantity = parseInt(newItemDetails[1]) }\r\n            else if (newItemDetails.length === 3) { newQuantity = parseInt(newItemDetails[1]); newNotes = newItemDetails[2] }\r\n\r\n            newMonkeyItemList.push({\r\n                itemNew: true,\r\n                itemName: newItem,\r\n                itemCount: newQuantity,\r\n                itemNotes: newNotes,\r\n                itemStatusID: 1,\r\n                itemStatus: \"NEW\",\r\n                itemStatusVerb: 'NEEDS',\r\n                itemStatusActive: true,\r\n                itemActionType: 1,\r\n                itemUserID: this.state.user.user_id,\r\n                itemUserName: this.state.user.name,\r\n                itemCode: searchEmoji(newItem),\r\n                itemDate: new Date().toString(),\r\n                itemID: 0,\r\n            })\r\n            this.newItem.getInstance().clear();\r\n            this.setState(() => {\r\n                return {\r\n                    monkeyData: newMonkeyItemList,\r\n                    ui: {\r\n                        updateUser: this.state.ui.updateUser,\r\n                        itemStatusList: this.state.ui.itemStatusList,\r\n                        distinctItems: this.state.ui.distinctItems,\r\n                        monkeyChange: true\r\n                    }\r\n                }\r\n            })  \r\n        }\r\n    }\r\n\r\n    monkeyDo(): void {\r\n        if (this.state.ui.monkeyChange) {\r\n            var monkeyDataVar: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n            console.log(monkeyDataVar);\r\n            updateMonkeyData(monkeyDataVar, (success: boolean) => {\r\n                if (success) {\r\n\r\n                    this.getMonkeyData();\r\n                    this.setState(() => { return { monkeyDance: true } })\r\n                } else {\r\n                    alert('Error updating database');\r\n                }\r\n            })\r\n        } else {\r\n            this.props.logOff();\r\n        }\r\n    }\r\n\r\n    monkeyAll(): void {\r\n        var newMonkeyState: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n        for (var i: number = 0; i < newMonkeyState.length; i++) {\r\n            var monkeyAllStatus: number = this.state.ui.itemStatusList[this.state.ui.itemStatusList.length - 1].statusID;\r\n            var lookupObj: any = this.lookupStatus(monkeyAllStatus.toString());\r\n\r\n            newMonkeyState[i].itemActionType = lookupObj.actionType;\r\n            newMonkeyState[i].itemStatus = lookupObj.status;\r\n            newMonkeyState[i].itemStatusID = monkeyAllStatus;\r\n            newMonkeyState[i].itemStatusVerb = lookupObj.status_verb;\r\n            newMonkeyState[i].itemStatusActive = lookupObj.status_active;\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {\r\n                monkeyData: newMonkeyState, ui: {\r\n                    updateUser: this.state.ui.updateUser,\r\n                    itemStatusList: this.state.ui.itemStatusList,\r\n                    distinctItems: this.state.ui.distinctItems,\r\n                    monkeyChange: true\r\n                } } });\r\n    }\r\n\r\n    monkeyDanceToggle() {\r\n        this.setState(() => { return { monkeyDance: !this.state.monkeyDance } })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMonkeyData();\r\n    }\r\n\r\n    render() {\r\n        return (    \r\n            <div className=\"Main\">\r\n                <MonkeyMessage show={this.state.monkeyDance} monkeyDanceToggle={this.monkeyDanceToggle} logOff={this.props.logOff} />\r\n                <Navbar fixed=\"top\" sticky=\"top\" bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#home\">Grocery Monkey</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <div style={{ width: \"100%\", display: \"flex\", textAlign: \"left\" }}>\r\n                            <InputGroup>\r\n                                <Typeahead                                              \r\n                                        id=\"groceryTypeahead\"\r\n                                        selectHintOnEnter\r\n                                        options={this.state.ui.distinctItems}\r\n                                        placeholder=\"Item, Quantity, Notes\"\r\n                                        clearButton\r\n                                        labelKey=\"item\"\r\n                                        emptyLabel=\"\"\r\n                                        ref={(typeahead: any) => this.newItem = typeahead}\r\n                                    />\r\n\r\n                                <InputGroup.Append>\r\n                                    < Button variant=\"outline-success\" onClick={() => ( this.addMonkeyItem(this.newItem.getInstance().getInput().value)) } > Add Item</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <div >\r\n                    <ListGroup>\r\n                        {this.state.monkeyData.map((item: ImMonkeyData_State, i: number) => {\r\n                            return (\r\n                                <ListGroupItem key={i} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                    <div style={{ width: \"10%\", textAlign: \"center\", display: \"inline-block\" }}>\r\n                                        <Image className=\"list_profile_img\" src={'./images/' + item.itemUserName + '.jpg'} roundedCircle />\r\n                                        <br />\r\n                                        {item.itemUserName}\r\n                                    </div>\r\n                                    <div style={{ width: \"60%\", textAlign: \"center\", display: \"inline-block\" }}>\r\n                                        {emoji.emojify(item.itemCode) + ' ' + item.itemName + (item.itemCount ? ' (' + item.itemCount + ')' : '')}\r\n                                        <br />\r\n                                        {item.itemNotes}\r\n                                    </div>\r\n                                    <div style={{ width: \"30\", textAlign: \"right\", display: \"inline-block\" }}>\r\n                                        <Form>\r\n                                            <Form.Control as=\"select\" value={item.itemStatusID.toString()} onChange={(event: any) => this.monkeyItemAction(event, i)}>\r\n                                                {this.state.ui.itemStatusList.filter((el) =>\r\n                                                {\r\n                                                    const isSame: boolean = (this.state.user.user_id === item.itemUserID) || el.action_sameuser;\r\n                                                    return (item.itemNew ? el.action_new && isSame : isSame )                                                        \r\n                                                })\r\n                                                    .map((lookup_item: ImMonkeyData_Status, k: number) => {\r\n                                                        return <option key={k} value={lookup_item.statusID.toString()} > {lookup_item.status}</option>\r\n                                            })}\r\n                                            </Form.Control>\r\n                                        </Form>\r\n                                    </div>\r\n                                </ListGroupItem>\r\n                            )\r\n                        })}\r\n                    </ListGroup>\r\n                    <br /><br/>\r\n                    </div>\r\n                    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\" fixed=\"bottom\" >\r\n                            <Nav style={{ textAlign: \"left\", width: \"30%\" }}>\r\n                                <div style={{ width: \"100%\", verticalAlign: \"center\" }}>\r\n                                    <NavItem as={Link} to='/user'>\r\n                                        <Image\r\n                                            alt=\"\"\r\n                                            src={'./images/' + this.state.user.name + '.jpg'}\r\n                                            width=\"40\"\r\n                                            height=\"40\"\r\n                                            className=\"profile_Image\"\r\n                                            roundedCircle                              \r\n                                        />\r\n                                    </NavItem>\r\n                                    <span style={{ visibility: \"hidden\" }}>X</span><span style={{ color: \"white\", fontWeight:\"bold\" }}>{this.state.user.name}</span>  \r\n                                </div>\r\n                            </Nav>\r\n                            <Nav style={{ textAlign:\"right\",width:\"70%\" }}>\r\n                                <div style={{ width: \"100%\", textAlign: \"right\" }}>\r\n                                    <Button variant=\"light\" onClick={() => this.monkeyAll()}>Monkey All</Button>\r\n                                    <span>{\"  \"}</span>\r\n                                    <Button variant=\"light\" onClick={() => this.monkeyDo()} >\r\n                                        {this.state.ui.monkeyChange? 'Monkey Do' : 'Logoff'}\r\n                                    </Button>\r\n                                </div>\r\n                            </Nav>\r\n                        </Navbar>\r\n                    </div> \r\n        )\r\n    }   \r\n}\r\n\r\nexport default Main;","\r\nimport { restAPIURL, xheader, ImMonkeyData_Users, ImMonkeyData_State } from '../constants/constants';\r\n\r\n\r\nexport const validatePin = function (pin: string, callback: Function): void {\r\n    fetch(restAPIURL + '/authenticateuser', { method: 'POST', headers: xheader, body: JSON.stringify({ pin: pin }) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            //console.log(returnjson.user[0]);\r\n            callback(returnjson.success, returnjson.user);\r\n        });\r\n}\r\n\r\nexport const getAllMonkeyData = function (auth:boolean, callback: Function):void {\r\n    fetch(restAPIURL + '/getmonkeydata', { method: 'POST', headers: xheader, body: JSON.stringify({}) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        })\r\n}\r\n\r\nexport const updateUser = function (userParams: ImMonkeyData_Users, callback: Function): void {\r\n    fetch(restAPIURL + '/updateuser', { method: 'PUT', headers: xheader, body: JSON.stringify(userParams) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(returnjson.user)\r\n                : callback({})\r\n        })\r\n}\r\n\r\nexport const updateMonkeyData = function (userParams_state: Array<ImMonkeyData_State>, callback: Function): void {\r\n    fetch(restAPIURL + '/updatemonkeydata', { method: 'PUT', headers: xheader, body: JSON.stringify(userParams_state) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(true)\r\n                : callback(false)\r\n        })\r\n\r\n}","import React from 'react';\r\nimport { Image, Card, Form, Col, Button, Row} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './user.css';\r\nimport '../functions/fetchfunctions';\r\nimport { ImMonkeyData_Users } from '../constants/constants';\r\n\r\n\r\n\r\ninterface IMyStateInterface {\r\n    changeUser: boolean;\r\n}\r\n\r\ninterface IMyPropsInterface {\r\n    auth: boolean;\r\n    user: ImMonkeyData_Users;\r\n    updateUser: Function;\r\n}\r\n\r\nclass User extends React.Component<IMyPropsInterface, IMyStateInterface>{\r\n    private userName: any;\r\n    private PIN: any;\r\n    private email: any;\r\n    private sms: any;\r\n    private notify: any;\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);\r\n        this.userName = React.createRef();\r\n        this.PIN = React.createRef();\r\n        this.email = React.createRef();\r\n        this.sms = React.createRef();\r\n        this.notify = React.createRef();\r\n        this.state = { changeUser: false };\r\n        this.needSave = this.needSave.bind(this);\r\n        this.updateUserLocal = this.updateUserLocal.bind(this);\r\n    }\r\n\r\n    needSave(): void {\r\n        if (!this.state.changeUser) { this.setState(() => { return { changeUser: true } }) };\r\n    }\r\n\r\n    updateUserLocal(event: any): void {\r\n        event.preventDefault();\r\n        const params = {\r\n            user_id: this.props.user.user_id,\r\n            name: this.userName.current.value,\r\n            pin: this.PIN.current.value,\r\n            email: this.email.current.value,\r\n            sms: this.sms.current.value,\r\n            notify: this.notify.current.checked\r\n        };\r\n        this.props.updateUser(params, ()=>(this.setState(()=>{ return { changeUser: false } })) );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                <div style={{ width:\"90%\",display: \"inline-block\" }}>\r\n                    <br />\r\n                    <Form onSubmit={this.updateUserLocal}>\r\n                        <Card bg=\"light\" style={{ width: \"100%\", textAlign: \"left\" }}>\r\n                            <Card.Header>\r\n                                <div style={{ width: \"100%\", display:\"inline-block\" }}>\r\n                                    <div style={{display:\"inline-block\",textAlign:\"left\", width:\"50%\"}}>\r\n                                        <Image style={{ width: \"40px\", height: \"40px\" }} src={'./images/' + this.props.user.name + '.jpg'} roundedCircle />\r\n                                        <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>{ this.props.user.name }</span>\r\n                                    </div>\r\n                                    <div style={{display:\"inline-block\",width:\"50%\",textAlign:\"right\"}}>\r\n                                        <Form.Group>  \r\n                                            <Link to='/main'><Button >Back</Button></Link>\r\n                                            <span style={{ visibility: \"hidden\" }}>{'  '}</span>\r\n                                            <Button disabled={!this.state.changeUser} type=\"submit\" >Save</Button>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                                    <Form.Label column sm={2}>\r\n                                        User Name\r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.userName} onChange={() => this.needSave()} placeholder=\"User Name\" defaultValue={this.props.user.name} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} controlId=\"formHorizontalPIN\">\r\n                                    <Form.Label column sm={2}>\r\n                                        PIN\r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.PIN} onChange={() => this.needSave()} type=\"password\" placeholder=\"PIN\" defaultValue={this.props.user.pin} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                    <Form.Label column sm={2}>\r\n                                        Email\r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.email} onChange={() => this.needSave()} type=\"email\" placeholder=\"Email\" defaultValue={this.props.user.email} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} type=\"email\" controlId=\"formHorizontalSMS\">\r\n                                    <Form.Label column sm={2}>\r\n                                        SMS \r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.sms} onChange={() => this.needSave()} placeholder=\"SMS\" defaultValue={this.props.user.sms} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n                                    <Col sm={{ span: 10, offset: 2 }}>\r\n                                        <Form.Check ref={this.notify} onChange={() => this.needSave()} label=\"Grocery Monkey Notifications\" defaultChecked={this.props.user.notify} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, BrowserRouter as Router, Redirect, BrowserRouterProps } from 'react-router-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nimport Splash from './components/splash';\r\nimport Main from './components/main';\r\nimport User from './components/user';\r\n\r\nimport { validatePin, updateUser } from './functions/fetchfunctions';\r\nimport { ImMonkeyData_Users } from './constants/constants';\r\n\r\ninterface IMyStateInterface {\r\n    auth: boolean;\r\n    user: ImMonkeyData_Users;\r\n};\r\n\r\ninterface PrivateRouteProps extends BrowserRouterProps {\r\n    component: React.ReactType;\r\n    path: string;\r\n    isAuthenticated: boolean;\r\n    user: ImMonkeyData_Users;\r\n    logOff?: Function;\r\n    updateUser?: Function;\r\n};\r\n\r\nconst PrivateRoute: React.SFC<PrivateRouteProps> = (props: PrivateRouteProps) => {\r\n    const { component: Component, ...rest } = props;\r\n    return (\r\n        <Route {...rest} render={() => (\r\n            props.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to='/' />\r\n        )} />\r\n    )\r\n};\r\n\r\n\r\nclass AppContainer extends React.Component<{}, IMyStateInterface> {\r\n    constructor(props: React.ReactPropTypes) {\r\n        super(props);\r\n        this.state = {\r\n            auth: false,\r\n            user: {user_id:0, name:''},\r\n        }\r\n        this.authenticatePin = this.authenticatePin.bind(this);\r\n        this.logOff = this.logOff.bind(this);\r\n        this.updateUser = this.updateUser.bind(this);\r\n    }\r\n\r\n    logOff():void {\r\n        this.setState(() => {\r\n            return {\r\n                auth: false,\r\n            }\r\n        })\r\n    }\r\n\r\n    authenticatePin(pin: string, callback: Function): void {\r\n        const userAuth = (authFlag: boolean, user: ImMonkeyData_Users) => {\r\n            this.setState(() => {\r\n                return {\r\n                    auth: authFlag,\r\n                    user: user,\r\n                }\r\n            })\r\n            callback(authFlag);\r\n        }\r\n        validatePin(pin, userAuth.bind(this));\r\n    }\r\n\r\n    updateUser(params: ImMonkeyData_Users, callback: Function): void {\r\n        const updateUserCB = (newUser: ImMonkeyData_Users): void => {\r\n            this.setState(() => { return { user: newUser } });\r\n            callback();\r\n        }\r\n        updateUser(params, updateUserCB.bind(this));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Router>\r\n                <Route exact path=\"/\" render={(props: any) => (<Splash {...props} isAuthenticated={this.state.auth} authenticatePin={this.authenticatePin} />)} />\r\n                <PrivateRoute path=\"/main\" component={Main} isAuthenticated={this.state.auth} user={this.state.user} logOff={this.logOff}/>\r\n                <PrivateRoute path=\"/user\" component={User} isAuthenticated={this.state.auth} user={this.state.user} updateUser={this.updateUser}/>\r\n            </Router>\r\n            )\r\n        }\r\n}\r\n\r\n\r\nReactDOM.render(<AppContainer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}