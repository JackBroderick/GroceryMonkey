{"version":3,"sources":["serviceWorker.ts","constants/constants.tsx","functions/fetchfunctions.tsx","components/splash.tsx","components/message.tsx","components/monkeyrace.tsx","components/itemphoto.tsx","components/itemconfig.tsx","components/main.tsx","components/user.tsx","components/config.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","xheader","emojiModeConstants","getAllMonkeyData","auth","callback","fetch","method","headers","body","JSON","stringify","then","res","json","returnjson","success","data","updateUser","userParams","user","getUsers","updateGroceryItem","params","Splash","props","PIN","React","createRef","state","redoAuth","isAuthenticated","tryPin","bind","tryPinQuick","pin","length","this","cbTryPinB","authFlag","current","value","setState","tryautoPIN","change_tryautoPIN","authenticatePin","autoPIN","setTimeout","isAdmin","to","className","Image","src","style","display","Spinner","animation","variant","InputGroup","FormControl","autoFocus","ref","placeholder","aria-label","aria-describedby","onChange","textAlign","width","Append","cursor","onClick","Text","color","Component","MonkeyMessage","monkeyImage","getMonkeyImage","monkeyDir","Math","floor","random","toString","height","Modal","centered","show","Header","translate","Title","Body","fluid","roundedCircle","Footer","Button","monkeyDanceToggle","logOff","emoji","require","dateFormat","MonkeyRace","monkeyMonth","Date","bananaHistory","getBananas","getBananaHistory","bananaCount","bananaCountString","i","emojify","eventKey","bananaData","getBananaWinnerHistory","getBananaMoochHistory","scrollable","Tabs","defaultActiveKey","id","onSelect","e","Tab","title","ListGroup","users","map","ListGroupItem","key","alignItems","user_id","name","banana_count","label","gif_image","monkeyRaceToggle","MonkeyTab","banMonth","banUserID","banUserName","banCount","MonkeyItemPhoto","itemPhotoLocation","size","onHide","showItemToggle","ItemCleanup","initialSelectedItem","item","code","filterRef","useRef","updateRef","useState","loading","updateloading","groceryItems","updategroceryItems","filterString","updatefilterString","selectedItem","setselectedItem","selectItemChange","setSelectedItemChange","show_emoji","toggle_emoji","getItems","useCallback","resultJSON","distinctGroceryListItems","deleteItem","confirm","alert","useEffect","focus","toggleEmojiConfig","mode","Form","Control","filter","el","RegExp","test","backgroundColor","type","defaultValue","border","visibility","itemUpdate","updateItem","ItemEmojiConfig","searchRef","search","emojiArray","searchemojiArray","closeButton","fontSize","newemoji","selectNewEmoji","changeemoji","onSubmit","event","preventDefault","toLowerCase","scrollTo","searchemojis","EmojiKeyPair","newRef","initialSelectedemoji","newKey","updateNewKey","emojiKeys","updateemojiKeys","selectedEmoji","updateselectedEmoji","showEmojiSelect","updateShowEmojiSelect","newEmojiPair","createEmojiLookup","getEmojiLookup_Keys","deleteEmojiPair","emojiItem","newSelectedEmoji","Prepend","newKeyString","newKeyChange","disabled","ItemsVerbs","itemInput","verbInput","refresh","updaterefresh","verbs","getVerbs","selectedIndex","updateselectedIndex","verbChanged","updateverbChanged","updateVerb","verbIndex","status","status_verb","updateGroceryItemStatus","groceryItemStatus","actionType","getEmojiType","action_type","emojiRegex","Main","newItem","addItem","monkeyDance","monkeyRace","monkeyItemPhoto","ui","monkeyChange","monkeyLoaded","showCamera","photoTaken","itemPhoto","itemStatusList","distinctItems","emojiLookup","monkeyData","emojiConfig","selectedEmojiIndex","monkeyItemAction","monkeyItemAction_Do","lookupStatus","addMonkeyItem","monkeyDo","monkeyAll","getBananaCount","onTakePhoto","toggleCamera","getEmojiMatch","changeEmoji","changeSelectedEmoji","changeMonkeyQuantity","monkeyIndex","increment","newMonkeyDataState","newMonkeyUI","newItemCount","itemCount","itemChanged","statusLookup","find","status_active","itemNew","itemActionType","itemName","matchEmoji","itemName_lcase","substr","slice","emojiLookupMatch","includes","searchList","dataURI","tempUI","lookupUserBananas","statusID","parseInt","eventitemOrdinal","target","eventVal","itemOrdinal","newState","lookupObj","itemStatus","itemStatusID","itemStatusVerb","itemStatusActive","itemUserID","itemUserName","mData","new_monkeyData","groceryListItems","push","itemID","grocery_list_id","itemDate","date","count","itemCode","itemNotes","notes","status_id","username","photo","itemPhotoURI","photo_location","new_ui","emojilookup","newItemString","newItemDetails","split","newMonkeyItemList","newItemStrip","newQuantity","newNotes","regex","replace","charAt","toUpperCase","getInstance","clear","userParams_state","monkeyDataVar","userName","userID","console","log","getMonkeyData","newMonkeyState","monkeyAllStatus","arg","newUI","itemIndex","newEmoji","newMonkeyData_State","Navbar","fixed","sticky","bg","expand","verticalAlign","flexDirection","onToggle","Brand","Toggle","aria-controls","Collapse","float","selectHintOnEnter","options","k","clearButton","labelKey","emptyLabel","typeahead","getInput","dataUri","imageType","IMAGE_TYPES","JPG","imageCompression","isMaxResolution","idealFacingMode","FACING_MODES","ENVIRONMENT","isDisplayStartCameraError","isImageMirror","getTime","fontWeight","wordWrap","textAlignLast","as","isSame","action_sameuser","action_new","lookup_item","alignContent","Nav","NavItem","Link","alt","User","userSelfieSubmit","email","sms","notify","changeUser","newSelfie","userSelfie","selfieChange","needSave","updateUserLocal","toggleSelfie","checked","production","updateUserSelfie","Card","Group","Row","controlId","Label","column","sm","Col","span","offset","Check","defaultChecked","MonkeyPicture","Config","adminPin","notifications","emailUserName","emailUserPassword","smtpServer","portNumber","ssl","domain","emailAlias","appURL","httpPort","httpsPort","userRefs","newName","newPIN","changeConfig","userChange","setRefs","newChange","updateConfig","updateUserInfo","newUser","deleteUserData","userChanges","getUserData","userIndex","userElement","userChangeArray","userResult","cur_userChanges","configParams_state","configID","config","alignSelf","Img","PrivateRoute","component","rest","render","AppContainer","validatePin","getConfigInfo","configJSON","userJSON","userJson","exact","path","ReactDOM","returnPIN","HTMLheadElement","document","getElementsByName","m_auth_attempt","getAttribute","m_auth_pin","getAutoPIN","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebb63d67.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nexport const restAPIURL = process.env.NODE_ENV === 'production' ? '' : 'http://nodeserver:8080';\r\n\r\nexport const xheader = {\r\n    \"Content-Type\": \"application/json\"\r\n};\r\n\r\nexport const shared_Key = 13371;\r\n\r\nexport interface ImMonkeyData {\r\n    groceryListItems: Array<ImMonkeyData_GroceryListItems>;\r\n    users: Array<ImMonkeyData_Users>;\r\n    groceryItemStatus: Array<ImMonkeyData_Status>;\r\n    distinctGroceryListItems: Array<ImMonkeyData_Lookup>;\r\n    emojilookup: Array<ImEmojiLookup>;\r\n};\r\n\r\nexport interface ImMonkeyData_Users {\r\n    user_id: number;\r\n    name: string;\r\n    pin?: string;\r\n    email?: string;\r\n    sms?: string;\r\n    notify?: boolean;\r\n    banana_count?: number;\r\n};\r\n\r\nexport interface ImMonkeyData_Status {\r\n    statusID: number;\r\n    status: string;\r\n    action_new: boolean;\r\n    action_sameuser: boolean;\r\n    action_type: number;\r\n    status_verb: string;\r\n    status_active: boolean;\r\n};\r\n\r\nexport interface ImMonkeyData_Lookup {\r\n    item: string;\r\n    code: string;\r\n    itemUpdate?: string;\r\n};\r\n\r\nexport interface ImMonkeyData_GroceryListItems {\r\n    grocery_list_id: number;\r\n    date: string;\r\n    item: string;\r\n    count: number;\r\n    code: string;\r\n    notes: string;\r\n    status_id: number;\r\n    status: string;\r\n    status_verb: string;\r\n    status_active: boolean;\r\n    user_id: number;\r\n    username: string;\r\n    photo: boolean;\r\n    photo_location: string;\r\n};\r\n\r\nexport interface ImMonkeyData_State {\r\n    itemNew: boolean;\r\n    itemActionType: number;\r\n    itemID: number;\r\n    itemDate: string;\r\n    itemName: string;\r\n    itemCount: number;\r\n    itemCode: string;\r\n    itemNotes: string;\r\n    itemStatusID: number;\r\n    itemStatus: string;\r\n    itemStatusVerb: string;\r\n    itemStatusActive: boolean;\r\n    itemUserID: number;\r\n    itemUserName: string;\r\n    itemChanged: boolean;\r\n    itemPhoto: boolean;\r\n    itemPhotoURI: any;\r\n};\r\n\r\nexport interface ImMonkeyData_UpdateParams {\r\n    userName: string;\r\n    userID: number;\r\n    monkeyData: Array<ImMonkeyData_State>\r\n}\r\n\r\nexport interface ImMonkeyBanana_History {\r\n    banMonth: string;\r\n    banUserID: number;\r\n    banUserName: string;\r\n    banCount: number;\r\n}\r\n\r\nexport interface Imemoji_Match {\r\n    item: string;\r\n    match: string;\r\n}\r\n\r\nexport interface ImConfig {\r\n    configID: number;\r\n    adminPin: string;\r\n    notifications: boolean;\r\n    emailUserName: string;\r\n    emailUserPassword: string;\r\n    smtpServer: string;\r\n    portNumber: number;\r\n    ssl: boolean;\r\n    domain: string;\r\n    emailAlias: string;\r\n    appURL: string;\r\n    httpPort: number;\r\n    httpsPort: number;\r\n}\r\n\r\nexport interface ImEmoji_Modes {\r\n    modify: number;\r\n    select: number;\r\n}\r\n\r\nexport const emojiModeConstants:ImEmoji_Modes = {\r\n    modify: 1,\r\n    select: 2,\r\n}\r\n\r\nexport interface ImEmojiLookup {\r\n    code: string;\r\n    key: string;\r\n}\r\n\r\nexport interface IM_emoji {\r\n    emoji: string;\r\n    key: string;\r\n}\r\n\r\n","\r\nimport { restAPIURL, xheader, ImMonkeyData_Users, ImMonkeyData_UpdateParams, ImConfig, ImMonkeyData_Lookup, ImEmojiLookup, ImMonkeyData_Status } from '../constants/constants';\r\n\r\n\r\nexport const validatePin = function (pin: string, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/authenticateuser', { method: 'POST', headers: xheader, body: JSON.stringify({ pin: pin }) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            callback(returnjson.success, returnjson.user);\r\n        });\r\n}\r\n\r\nexport const getAllMonkeyData = function (auth:boolean, callback: Function):void {\r\n    fetch(restAPIURL + '/endpoints/getmonkeydata', { method: 'POST', headers: xheader, body: JSON.stringify({}) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        })\r\n}\r\n\r\nexport const updateUser = function (userParams: ImMonkeyData_Users, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/updateuser', { method: 'PUT', headers: xheader, body: JSON.stringify(userParams) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(returnjson.user)\r\n                : callback({})\r\n        })\r\n}\r\n\r\nexport const createUser = function (userParams: ImMonkeyData_Users, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/createuser', { method: 'POST', headers: xheader, body: JSON.stringify(userParams) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            callback(returnjson.success)\r\n        })\r\n}\r\n\r\nexport const deleteUser = function (userParams: ImMonkeyData_Users, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/deleteuser', { method: 'DELETE', headers: xheader, body: JSON.stringify(userParams) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            callback(returnjson.success)\r\n        })\r\n}\r\n\r\nexport const updateMonkeyData = function (userParams_state: ImMonkeyData_UpdateParams, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/updatemonkeydata', { method: 'PUT', headers: xheader, body: JSON.stringify(userParams_state) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(true)\r\n                : callback(false)\r\n        })\r\n\r\n}\r\n\r\nexport const getBananaWinnerHistory = function (callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/getbananawinnerhistory', { method: 'POST', headers: xheader, body: '' })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        })\r\n}\r\n\r\nexport const getBananaMoochHistory = function (callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/getbananamoochhistory', { method: 'POST', headers: xheader, body: '' })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        })\r\n}\r\n\r\nexport const updateUserSelfie = function (userName: string, dataURI: any, callback:Function): void {\r\n    let params = { production: restAPIURL.length ? false: true, userName: userName, dataURI: dataURI };\r\n    fetch(restAPIURL + '/endpoints/updateuserselfie', { method: 'POST', headers: xheader, body: JSON.stringify(params) })\r\n        .then(res => res.json())\r\n        .then((returnjson => {\r\n            callback(returnjson.success);\r\n        }))\r\n}\r\n\r\nexport const getConfigInfo = function (callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/getconfiginfo', { method: 'POST', headers: xheader })\r\n        .then(res => res.json())\r\n        .then((returnjson => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        }))\r\n}\r\n\r\n\r\nexport const updateConfigInfo = function (configParams_state: ImConfig, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/updateconfiginfo', { method: 'PUT', headers: xheader, body: JSON.stringify(configParams_state) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            returnjson.success\r\n                ? callback(true)\r\n                : callback(false)\r\n        })\r\n\r\n}\r\n\r\nexport const getUsers = function (callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/getusers', { method: 'POST', headers: xheader })\r\n        .then(res => res.json())\r\n        .then((returnjson => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        }))\r\n}\r\n\r\nexport const updateGroceryItem = function (params: ImMonkeyData_Lookup, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/updategroceryitem', { method: 'PUT', headers: xheader, body: JSON.stringify(params) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {callback(returnjson.success)})\r\n}\r\n\r\nexport const deleteGroceryItem = function (params: ImMonkeyData_Lookup, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/deletegroceryitem', { method: 'DELETE', headers: xheader, body: JSON.stringify(params) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => { callback(returnjson.success) })\r\n}\r\n\r\nexport const getEmojiLookup = function (callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/getemojilookup', { method: 'POST', headers: xheader })\r\n        .then(res => res.json())\r\n        .then((returnjson => {\r\n            returnjson.success\r\n                ? callback(returnjson.data)\r\n                : callback({})\r\n        }))\r\n}\r\n\r\nexport const createEmojiLookup = function (params:ImEmojiLookup, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/createemojilookup', { method: 'PUT', headers: xheader, body: JSON.stringify(params) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => {\r\n            callback(returnjson.success)\r\n        })\r\n}\r\n\r\nexport const deleteEmojiLookup = function (params: ImEmojiLookup, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/deleteemojilookup', { method: 'DELETE', headers: xheader, body: JSON.stringify(params) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => { callback(returnjson.success) })\r\n}\r\n\r\nexport const updateGroceryItemStatus = function (params: ImMonkeyData_Status, callback: Function): void {\r\n    fetch(restAPIURL + '/endpoints/updategroceryitemstatus', { method: 'PUT', headers: xheader, body: JSON.stringify(params) })\r\n        .then(res => res.json())\r\n        .then((returnjson) => { callback(returnjson.success) })\r\n}\r\n","import React from 'react';\r\nimport { Image, InputGroup, FormControl, Spinner} from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './splash.css';\r\nimport '../functions/fetchfunctions';\r\n\r\n\r\ninterface IMyStateInterface {\r\n    redoAuth: boolean;\r\n}\r\n\r\ninterface IMyPropsInterface {\r\n    isAuthenticated: boolean;\r\n    authenticatePin: Function;\r\n    isAdmin: boolean;\r\n    logOff: Function;\r\n    autoPIN: string;\r\n    tryautoPIN: boolean;\r\n    change_tryautoPIN: Function;\r\n}\r\n\r\nclass Splash extends React.Component<IMyPropsInterface, IMyStateInterface>{\r\n    private PIN: any;\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);    \r\n        this.PIN = React.createRef();\r\n        this.state = {\r\n            redoAuth: this.props.isAuthenticated,\r\n        };\r\n        this.tryPin = this.tryPin.bind(this);\r\n        this.tryPinQuick = this.tryPinQuick.bind(this);\r\n    }\r\n\r\n    tryPinQuick(pin: string):void {\r\n        if (pin.length === 4) {this.tryPin(pin)}\r\n    }\r\n\r\n    tryPin(pin: string, callback?:Function):void {\r\n        const cbTryPin = (authFlag: boolean):void => {\r\n            if (this.PIN.current) {this.PIN.current.value = ''};\r\n            if (!authFlag) { this.setState(() => { return { redoAuth: !authFlag } }) };\r\n            if (this.props.tryautoPIN) { this.props.change_tryautoPIN() };\r\n        }\r\n        const cbTryPinB = cbTryPin.bind(this);\r\n        this.props.authenticatePin(pin, cbTryPinB);\r\n        if (callback) {callback()}\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.autoPIN && this.props.tryautoPIN) {\r\n            setTimeout(() => { this.tryPin(this.props.autoPIN) },600)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            !this.props.isAuthenticated ?\r\n                < div className=\"Splash\" >\r\n                    <br />\r\n                    <Image className=\"Image\" src='./images/grocerymonkey.jpg' />\r\n                    <br />\r\n                    <br />\r\n                    <h1>Grocery Monkey</h1>\r\n                    <br />\r\n                    <div style={{ display: \"inline-block\" }}>\r\n                        {(this.props.tryautoPIN && this.props.autoPIN)\r\n                            ?\r\n                            <Spinner animation=\"border\" variant=\"warning\" />\r\n                            :\r\n                            <InputGroup >\r\n                                <FormControl\r\n                                    autoFocus\r\n                                    ref={this.PIN}\r\n                                    placeholder=\"User PIN\"\r\n                                    aria-label=\"User PIN\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={() => this.tryPinQuick(this.PIN.current.value)}\r\n                                    style={{ textAlign: \"center\", width: \"100px\" }}\r\n                                />\r\n                                <InputGroup.Append style={{ cursor: \"pointer\" }} onClick={() => { this.tryPin(this.PIN.current.value) }}>\r\n                                    <InputGroup.Text>Login</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        }\r\n                        {(this.state.redoAuth) ? <><br /><span style={{ color: \"darkred\" }}><h3>INVALID PIN</h3></span></> : null}\r\n                    </div>\r\n                </div >\r\n                :\r\n                    this.props.isAdmin\r\n                    ?\r\n                    <Redirect to=\"/config\" />\r\n                    :\r\n                    <Redirect to=\"/main\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Splash;\r\n","import React from 'react';\r\nimport { Button, Modal, Image } from 'react-bootstrap';\r\nconst monkeyDir: string = '/images/monkey';\r\n\r\n\r\ninterface Im_MonkeyMessage_Props {\r\n    show: boolean;\r\n    monkeyDanceToggle: any;\r\n    logOff: any;\r\n}\r\n\r\ninterface Im_MonkeyMessage_State {\r\n    monkeyImage: string;\r\n}\r\n\r\n\r\nclass MonkeyMessage extends React.Component<Im_MonkeyMessage_Props, Im_MonkeyMessage_State> {\r\n    constructor(props: Im_MonkeyMessage_Props) {\r\n        super(props);\r\n        this.state = { monkeyImage: ''};\r\n        this.getMonkeyImage = this.getMonkeyImage.bind(this);\r\n    }\r\n\r\n    getMonkeyImage(): string {\r\n        var monkeyImageString: string;\r\n        var monkeyImageDirLength: number = 1;\r\n        monkeyImageString = monkeyDir + '/monkey' + Math.floor(1+(Math.random() * monkeyImageDirLength)).toString() + '.gif';\r\n        return monkeyImageString;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState(() => { return { monkeyImage: this.getMonkeyImage() } });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width:\"90%\",height:\"50%\"}}>\r\n                <Modal animation centered show={this.props.show} >\r\n                        <Modal.Header translate>\r\n                            <Modal.Title>You are a Grocery Monkey!</Modal.Title>\r\n                        </Modal.Header>\r\n                    <Modal.Body style={{ textAlign: \"center\" }}>\r\n                        <div style={{ width: \"100%}\" }}>\r\n                            <Image fluid roundedCircle src={this.state.monkeyImage} />\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.props.monkeyDanceToggle}>\r\n                            More Monkey Stuff\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.props.logOff}>\r\n                            No More Monkey\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonkeyMessage;\r\n","import React from 'react';\r\nimport { Button, Modal, Image, ListGroup, ListGroupItem, Tabs, Tab } from 'react-bootstrap';\r\nimport { ImMonkeyData_Users, ImMonkeyBanana_History } from '../constants/constants';\r\nimport { getBananaWinnerHistory } from '../functions/fetchfunctions';\r\nimport { getBananaMoochHistory } from '../functions/fetchfunctions';\r\nconst emoji = require('node-emoji');\r\nconst dateFormat = require('dateformat');\r\n\r\n\r\n\r\ninterface Im_MonkeyMessage_Props {\r\n    show: boolean;\r\n    monkeyRaceToggle: any;\r\n    users: Array<ImMonkeyData_Users>;\r\n    logOff: any;\r\n}\r\n\r\ninterface Im_MonkeyMessage_State {\r\n    monkeyImage: string;\r\n    monkeyMonth: string;\r\n    bananaHistory: Array<ImMonkeyBanana_History>;\r\n}\r\n\r\nclass MonkeyRace extends React.Component<Im_MonkeyMessage_Props, Im_MonkeyMessage_State> {\r\n    constructor(props: Im_MonkeyMessage_Props) {\r\n        super(props);\r\n        this.state = {\r\n            monkeyImage: './images/monkey/monkey_running.gif',\r\n            monkeyMonth: dateFormat(new Date(), 'mmmm'),\r\n            bananaHistory: [],\r\n        };\r\n        this.getBananas = this.getBananas.bind(this);\r\n        this.getBananaHistory = this.getBananaHistory.bind(this);\r\n    }\r\n\r\n    getBananas(bananaCount: number|undefined): string {\r\n        let bananaCountString: string = '';\r\n        if (bananaCount) {\r\n            for (var i: number = 1; i <= bananaCount; i++) {\r\n                bananaCountString = bananaCountString + emoji.emojify(\":banana:\");\r\n            }\r\n            return bananaCountString;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getBananaHistory(eventKey:string | null): void {\r\n        const callback = (bananaData: Array<ImMonkeyBanana_History>): void => {\r\n            this.setState(() => { return { bananaHistory: bananaData } })\r\n        }\r\n        if (eventKey === \"monkeys\") {\r\n            getBananaWinnerHistory(callback.bind(this));\r\n        } else if (eventKey === \"mooches\") {\r\n            getBananaMoochHistory(callback.bind(this));\r\n        } else {\r\n            this.setState(() => { return { monkeyMonth: dateFormat(new Date(), 'mmmm') } });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width:\"90%\",height:\"95%\"}}>\r\n                <Modal animation scrollable centered show={this.props.show} >\r\n                    <Modal.Header translate>\r\n                        <Modal.Title>\r\n                            <Image fluid roundedCircle width=\"60\" height=\"60\" src={this.state.monkeyImage} />\r\n                            {'The Monkey Race!'}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{ textAlign: \"center\" }}>\r\n                        <Tabs defaultActiveKey=\"current\" id=\"main_tab\" onSelect={(eventKey: string |null , e: React.SyntheticEvent<unknown>) => { this.getBananaHistory(eventKey) }}>\r\n                            <Tab eventKey=\"current\" title={this.state.monkeyMonth}>\r\n                                <div style={{ width: \"100%}\" }}>\r\n                                    <ListGroup>\r\n                                        {this.props.users.map((user: ImMonkeyData_Users, i: number) => {\r\n                                            return (\r\n                                                <ListGroupItem key={i} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                                    <div style={{ width: \"20%\", textAlign: \"center\", display: \"inline-block\"}}>\r\n                                                        <Image width=\"40\" height=\"40\" src={'./images/users/' + user.user_id + '.jpg'} roundedCircle />\r\n                                                        <br />\r\n                                                        {user.name}\r\n                                                    </div>\r\n                                                    <div style={{ width: \"80%\", textAlign: \"left\", display: \"inline-block\" }}>\r\n                                                        {'Banana Count: (' + user.banana_count + ')  ' + this.getBananas(user.banana_count)}\r\n                                                    </div>\r\n                                                </ListGroupItem>\r\n                                            )\r\n                                        })}\r\n                                    </ListGroup>\r\n                                </div>\r\n                            </Tab>\r\n                            <Tab eventKey=\"monkeys\" title=\"Monkeys\" >\r\n                                <MonkeyTab label=\"Bananas\" emoji=\":banana:\" gif_image=\"./images/star.gif\" data={this.state.bananaHistory} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"mooches\" title=\"Mooches\" >\r\n                                <MonkeyTab label=\"Requests\" emoji=\":speak_no_evil:\" gif_image=\"./images/question.gif\" data={this.state.bananaHistory} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.props.monkeyRaceToggle}>\r\n                            More Monkey Stuff\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.props.logOff}>\r\n                            No More Monkey\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IM_MonkeyTab_Props {\r\n    label: string;\r\n    emoji: string;\r\n    gif_image: string;\r\n    data: Array<ImMonkeyBanana_History>;\r\n}\r\n\r\nclass MonkeyTab extends React.Component<IM_MonkeyTab_Props, {}> {\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"100%\" }}>\r\n                <ListGroup>\r\n                    {this.props.data.map((bananaHistory: ImMonkeyBanana_History, i: number) => {\r\n                        return (\r\n                            <ListGroupItem key={i} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                <div style={{ width: \"22%\", textAlign: \"center\", display: \"inline-block\" }}>\r\n                                    <Image width=\"50\" height=\"50\" src = {this.props.gif_image} />\r\n                                    <br />\r\n                                    {dateFormat(new Date(bananaHistory.banMonth), 'mmmm')}\r\n                                </div>\r\n                                <div style={{ width: \"32%\", textAlign: \"center\", display: \"inline-block\", cursor:\"pointer\" }}>\r\n                                    <Image width=\"40\" height=\"40\" src={'./images/users/' + bananaHistory.banUserID + '.jpg'} roundedCircle />\r\n                                    <br />\r\n                                    {bananaHistory.banUserName}\r\n                                </div>\r\n                                <div style={{ width: \"46%\", textAlign: \"center\", display: \"inline-block\" }}>\r\n                                    {this.props.label + ': ' + emoji.emojify(this.props.emoji) + \"(\" + bananaHistory.banCount + \")\"}\r\n                                </div>\r\n                            </ListGroupItem>\r\n                        )\r\n                    })}\r\n                </ListGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MonkeyRace;\r\n","import React from 'react';\r\nimport { Modal, Image } from 'react-bootstrap';\r\n\r\n\r\ninterface Im_ItemProps{\r\n    showItemToggle: Function;\r\n    itemPhotoLocation: any;\r\n}\r\n\r\n\r\nclass MonkeyItemPhoto extends React.Component<Im_ItemProps, {}> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"90%\", height: \"50%\" }}>\r\n                <Modal animation centered show={this.props.itemPhotoLocation} size=\"xl\" onHide={() => { this.props.showItemToggle() }}>\r\n                    <Modal.Body style={{ textAlign: \"center\" }}>\r\n                        <div style={{ width: \"100%}\" }}>\r\n                            <Image fluid style={{ width: \"100%\", height: \"100%\" }} src={this.props.itemPhotoLocation} onClick={() => { this.props.showItemToggle() }}/>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonkeyItemPhoto;\r\n","import React, { FunctionComponent, useState, useEffect, useRef, ReactElement, useCallback } from 'react';\r\nimport { ListGroup, InputGroup, Form, Modal, Button } from 'react-bootstrap';\r\nimport { ImMonkeyData, ImMonkeyData_Lookup, emojiModeConstants, IM_emoji, ImEmojiLookup, ImMonkeyData_Status} from '../constants/constants';\r\nimport { getAllMonkeyData, updateGroceryItem, deleteGroceryItem, getEmojiLookup, createEmojiLookup, deleteEmojiLookup, updateGroceryItemStatus } from '../functions/fetchfunctions';\r\nimport { ListGroupItem } from 'react-bootstrap';\r\nconst emoji = require('node-emoji');\r\n\r\n\r\ninterface Im_emojiProps {\r\n    show: boolean;\r\n    toggleEmojiConfig: Function;\r\n    selectedItem: ImMonkeyData_Lookup;\r\n    mode: number;\r\n    selectNewEmoji?: Function;\r\n}\r\n\r\nexport const ItemCleanup: FunctionComponent<{ isAuthenticated: boolean }> = function ({ isAuthenticated }): React.ReactElement {\r\n\r\n    const initialItems: Array<ImMonkeyData_Lookup> = [];\r\n    const initialSelectedItem: ImMonkeyData_Lookup = {item:\"\",code:\"\"};\r\n    const initialFilter: string = \"\";\r\n\r\n    const filterRef = useRef<HTMLInputElement>(null);\r\n    const updateRef = useRef<HTMLInputElement>(null);\r\n\r\n    const [loading, updateloading] = useState(true);\r\n    const [groceryItems, updategroceryItems] = useState(initialItems);\r\n    const [filterString, updatefilterString] = useState(initialFilter);\r\n    const [selectedItem, setselectedItem] = useState(initialSelectedItem);\r\n    const [selectItemChange, setSelectedItemChange] = useState(false);\r\n    const [show_emoji, toggle_emoji] = useState(false);\r\n\r\n    const getItems: Function = useCallback(() => {\r\n        getAllMonkeyData(isAuthenticated, (resultJSON: ImMonkeyData) => {\r\n            if (resultJSON) {\r\n                updategroceryItems(resultJSON.distinctGroceryListItems);\r\n                setselectedItem(initialSelectedItem);\r\n            } else {\r\n                updategroceryItems([]);\r\n            }\r\n        })\r\n    }, [isAuthenticated, initialSelectedItem])\r\n\r\n\r\n    function updateItem() {\r\n        if (updateRef.current) {\r\n            let params: ImMonkeyData_Lookup = {\r\n                item: selectedItem.item,\r\n                code: selectedItem.code,\r\n                itemUpdate: updateRef.current.value,\r\n            }\r\n\r\n            updateGroceryItem(params, (success:boolean) => {\r\n                if (success) {\r\n                    setselectedItem(initialSelectedItem);\r\n                    getItems();\r\n                } else {\r\n                    alert(\"Error updating grocery item\");\r\n\r\n                }\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    function deleteItem(item: ImMonkeyData_Lookup) {\r\n        if (window.confirm(\"Delete \" + item.item + \" from the list of grocery items?\\n\\nThis cannot be undone\")) {\r\n            deleteGroceryItem(item, (success: boolean) => {\r\n                if (success) {\r\n                    setselectedItem(initialSelectedItem);\r\n                    getItems();\r\n                } else {\r\n                    alert(\"Error deleting grocery item\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            updateloading(false);\r\n            getItems();\r\n        }\r\n    }, [loading, getItems])\r\n\r\n    useEffect(() => {\r\n        if (updateRef.current) { updateRef.current.focus() }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {\r\n                show_emoji\r\n                    ? <ItemEmojiConfig show={show_emoji} toggleEmojiConfig={() => { getItems();toggle_emoji(!show_emoji) }} selectedItem={selectedItem} mode={emojiModeConstants.modify} />\r\n                    : <></>\r\n            }\r\n\r\n            <div style={{ width: \"100%\" }}>\r\n                <br />\r\n                <InputGroup >\r\n                    <Form.Control ref={filterRef} onChange={() => { setselectedItem(initialSelectedItem); if (filterRef.current) { updatefilterString(filterRef.current.value) } }} placeholder=\"Enter Filter Criteria\" />\r\n                    <InputGroup.Append>\r\n                        <InputGroup.Text onClick={() => { if (filterRef.current) { updatefilterString(\"\"); filterRef.current.value = \"\" } }} style={{ cursor: \"pointer\" }}>\r\n                            X\r\n                        </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </div>\r\n            <br />\r\n            {\r\n                groceryItems.length\r\n                    ?\r\n                    <ListGroup style={{ width: \"100%\" }} variant=\"flush\">\r\n                        {\r\n                            groceryItems.filter((el: ImMonkeyData_Lookup) => {\r\n                                let regexMatch: RegExp = new RegExp(\"\\\\b\" + filterString, \"i\")\r\n                                return (regexMatch.test(el.item))\r\n                            })\r\n                                .map((item: ImMonkeyData_Lookup, i: number) => (\r\n                                    <ListGroupItem key={i} style={{ display: \"flex\", width: \"100%\", alignItems: \"center\", backgroundColor: (JSON.stringify(selectedItem) === JSON.stringify(item)) ? \"Gainsboro\" : \"Transparent\" }} >\r\n                                            <div style={{ width: \"10%\", textAlign: \"left\" }}>\r\n                                                <label onClick={() => { setselectedItem(item); toggle_emoji(true) }} style={{ cursor: \"pointer\" }}>\r\n                                                    {emoji.emojify(item.code)} \r\n                                                </label>\r\n                                            </div>\r\n                                            <div style={{ width: \"78%\", textAlign: \"left\" }} onClick={() => { setselectedItem(item); setSelectedItemChange(false) }}>\r\n                                                {\r\n                                                    (JSON.stringify(item) === JSON.stringify(selectedItem))\r\n                                                        ? <input type=\"text\" ref={updateRef} onChange={() => { if (updateRef.current && (selectedItem.item !== updateRef.current.value)) { setSelectedItemChange(true) } }} defaultValue={item.item} style={{ width: \"100%\", border: 0, backgroundColor: \"Transparent\", color: \"darkblack\" }} />\r\n                                                        : <label><span style={{visibility:\"hidden\"}}>x</span>{item.item}</label>\r\n                                                }\r\n                                            </div>\r\n                                            <div style={{ width: \"10%\", textAlign: \"right\" }}>\r\n                                            {\r\n                                                (JSON.stringify(item) === JSON.stringify(selectedItem))\r\n                                                    ? selectItemChange\r\n                                                        ?\r\n                                                                <label onClick={() => { updateItem() }} style={{ cursor: \"pointer\" }} >\r\n                                                                    { emoji.emojify(':floppy_disk:') }\r\n                                                                </label>\r\n                                                            : <></>\r\n\r\n                                                        :\r\n                                                            <label onClick={() => { deleteItem(item) }} style={{ cursor: \"pointer\" }}>\r\n                                                                {emoji.emojify(':wastebasket:')}\r\n                                                            </label>\r\n                                                    }\r\n                                            </div>\r\n                                    </ListGroupItem>))\r\n                        }\r\n                    </ListGroup>\r\n                    : <label>No Items</label>\r\n            }    \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport const ItemEmojiConfig: FunctionComponent<Im_emojiProps> = function (props: Im_emojiProps): ReactElement {\r\n    const searchRef = useRef<HTMLInputElement>(null);\r\n    const [emojiArray, searchemojiArray] = useState(emoji.search(\"\"));\r\n\r\n    function searchemojis(event: React.FormEvent): void {\r\n        event.preventDefault();\r\n        if (searchRef.current) {\r\n            searchemojiArray(emoji.search(searchRef.current.value.toLowerCase()))\r\n            searchRef.current.value = \"\";\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    function changeemoji(newemoji: IM_emoji): void {\r\n        if (props.mode === emojiModeConstants.modify) {\r\n            if (window.confirm(\"Make the following emoji change?\\n\\n\" + props.selectedItem.item + \": \" + newemoji.emoji)) {\r\n                let params: ImMonkeyData_Lookup = {\r\n                    item: props.selectedItem.item,\r\n                    code: \":\" + newemoji.key + \":\",\r\n                    itemUpdate: props.selectedItem.item,\r\n                }\r\n\r\n                updateGroceryItem(params, (success: boolean) => {\r\n                    if (success) {\r\n                        props.toggleEmojiConfig();\r\n                    } else {\r\n                        alert(\"Error updating grocery items\");\r\n                    }\r\n                })\r\n\r\n            }\r\n        } else if(props.mode === emojiModeConstants.select){\r\n            if (props.selectNewEmoji) { props.selectNewEmoji(newemoji) };\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal size=\"lg\" show={props.show} scrollable onHide={() => { props.toggleEmojiConfig() }}>\r\n            <Modal.Header translate closeButton >\r\n                <Modal.Title>\r\n                    {\r\n                        props.mode === emojiModeConstants.modify\r\n                            ? props.selectedItem.item + \": \" + emoji.emojify(props.selectedItem.code)\r\n                            : \"Select New emoji\"\r\n                    }\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {\r\n                    emojiArray.length\r\n                        ?\r\n                        emojiArray.map((el: IM_emoji, i: number) => (\r\n                            <label key={i} style={{ fontSize: \"40px\", cursor: \"pointer\" }} onClick={() => { changeemoji(el) }} title={ el.key }>\r\n                                    {el.emoji}\r\n                            </label>\r\n                                ))\r\n                        :\r\n                        <label>No matches found</label>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Form onSubmit={(event: React.FormEvent) => { searchemojis(event) }} >\r\n                    <InputGroup >\r\n                        <Form.Control ref={searchRef} placeholder=\"Enter Search Criteria\" />\r\n                        <InputGroup.Append>\r\n                            <Button type=\"submit\">\r\n                                Search\r\n                            </Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form>\r\n            </Modal.Footer>\r\n        </ Modal>\r\n    )\r\n}\r\n\r\nexport const EmojiKeyPair: FunctionComponent = function (): ReactElement {\r\n\r\n    const newRef = useRef<HTMLInputElement>(null);\r\n\r\n    const initialnewKey: string= '';\r\n    const initialEmojiKeyes: Array<ImEmojiLookup> = [];\r\n    const initialSelectedemoji: IM_emoji = {emoji:'', key:''};\r\n\r\n    const [newKey, updateNewKey] = useState(initialnewKey);\r\n    const [emojiKeys, updateemojiKeys] = useState(initialEmojiKeyes);\r\n    const [selectedEmoji, updateselectedEmoji] = useState(initialSelectedemoji);\r\n    const [showEmojiSelect, updateShowEmojiSelect] = useState(false);\r\n\r\n    function newEmojiPair(event: React.FormEvent): void {\r\n        event.preventDefault();\r\n        let params: ImEmojiLookup = {\r\n            code: ':' + selectedEmoji.key + ':',\r\n            key: newKey.toLowerCase(),\r\n        }\r\n        createEmojiLookup(params, (success: boolean) => {\r\n            if (success) {\r\n                if (newRef && newRef.current) { newRef.current.value = '' };\r\n                updateselectedEmoji(initialSelectedemoji);\r\n                getEmojiLookup_Keys();\r\n            } else {\r\n                alert(\"Error adding emoji lookup\");\r\n            }\r\n        })\r\n    }\r\n\r\n    function deleteEmojiPair(emojiItem: ImEmojiLookup): void {\r\n        if (window.confirm(\"Delete the below emoji lookup?\\n\\n\" + emojiItem.key + \": \" + emoji.emojify(emojiItem.code))) {\r\n            deleteEmojiLookup(emojiItem, (success: boolean) => {\r\n                if (success) {\r\n                    getEmojiLookup_Keys();\r\n                } else {\r\n                    alert(\"Error deleting emoji lookup\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function getEmojiLookup_Keys():void {\r\n        getEmojiLookup((data:Array<ImEmojiLookup>) => {\r\n            updateemojiKeys(data)\r\n        })\r\n    }\r\n\r\n    function newKeyChange(): void {\r\n        const newKeyString:string = newRef && newRef.current ? newRef.current.value : '';\r\n        updateNewKey(newKeyString);\r\n    }\r\n\r\n    function selectedEmojiUpdate(newSelectedEmoji: IM_emoji): void {\r\n        updateselectedEmoji(newSelectedEmoji);\r\n        updateShowEmojiSelect(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getEmojiLookup_Keys();\r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            <ItemEmojiConfig show={showEmojiSelect} toggleEmojiConfig={() => { updateShowEmojiSelect(!showEmojiSelect) }} selectedItem={{item:'', code:''}} mode={emojiModeConstants.select} selectNewEmoji={selectedEmojiUpdate}/>\r\n            <div style={{ width: \"100%\" }}>\r\n                <br />\r\n                <Form onSubmit={(event: React.FormEvent) => { newEmojiPair(event) }} >\r\n                    <InputGroup >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text onClick={() => { updateShowEmojiSelect(true) }}>{selectedEmoji.emoji.length?selectedEmoji.emoji:'...'}</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control ref={newRef} placeholder=\"Enter New emoji Key\" onChange={() => { newKeyChange() }}/>\r\n                        <InputGroup.Append>\r\n                            <Button type=\"submit\" disabled={newKey.length===0 || selectedEmoji.emoji.length===0}>\r\n                                New\r\n                            </Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form>\r\n                <br />\r\n            </div>\r\n                {\r\n                    emojiKeys.length\r\n                        ?\r\n                        <ListGroup style={{ width: \"100%\" }} variant=\"flush\">\r\n                            {\r\n\r\n                                emojiKeys.map((el: ImEmojiLookup, i: number) => (\r\n                                    <ListGroupItem key={i} style={{ display: \"flex\", width: \"100%\", alignItems: \"center\" }} >\r\n                                        <div style={{ width: \"10%\", textAlign:\"left\" }}>\r\n                                            {emoji.emojify(el.code)}\r\n                                        </div>\r\n                                        <div style={{ width: \"78%\", textAlign:\"center\" }}>\r\n                                            {el.key}\r\n                                        </div>\r\n                                        <div style={{ width: \"10%\", textAlign:\"right\" }}>\r\n                                            <label onClick={() => { deleteEmojiPair(el)}}>\r\n                                                {emoji.emojify(':wastebasket:')}\r\n                                            </label>\r\n                                        </div>\r\n                                    </ListGroupItem>\r\n                                ))\r\n                            }\r\n                        </ListGroup>\r\n                        :\r\n                        <label>No emoji Match Keys</label>\r\n                }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const ItemsVerbs: FunctionComponent<{ isAuthenticated: boolean }> = function ({ isAuthenticated }): ReactElement {\r\n\r\n    const itemInput = useRef<HTMLInputElement>(null);\r\n    const verbInput = useRef<HTMLInputElement>(null);\r\n    const initVerb: Array<ImMonkeyData_Status> = [];\r\n    const [refresh, updaterefresh] = useState(true);\r\n    const [verbs, getVerbs] = useState(initVerb);\r\n    const [selectedIndex, updateselectedIndex] = useState(-1);\r\n    const [verbChanged, updateverbChanged] = useState(false);\r\n\r\n    function getEmojiType(actionType:number):string {\r\n        switch (actionType) {\r\n            case 2:\r\n                return \":heavy_check_mark:\"\r\n            case 3:\r\n                return \":x:\";\r\n            default:\r\n                return \":question:\";\r\n        }\r\n    }\r\n\r\n    function updateVerb(verbIndex: number): void {\r\n        let params: ImMonkeyData_Status = verbs[verbIndex];\r\n        if (itemInput && itemInput.current) { params.status = itemInput.current.value }\r\n        if (verbInput && verbInput.current) { params.status_verb = verbInput.current.value }\r\n        updateGroceryItemStatus(params, (success: boolean) => {\r\n            if (success) {\r\n                updateselectedIndex(-1);\r\n                updateverbChanged(false);\r\n                updaterefresh(true);\r\n            } else {\r\n                alert(\"Error updating verb status\");\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (refresh) {\r\n            getAllMonkeyData(isAuthenticated, (resultJSON: ImMonkeyData) => {\r\n                resultJSON ? getVerbs(resultJSON.groceryItemStatus) : getVerbs([])\r\n            })\r\n            updaterefresh(false);\r\n        }\r\n        }, [verbs, isAuthenticated, refresh])\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", display: \"block\" }}>\r\n            {verbs.length\r\n                ?\r\n                < div style={{ width: \"100%\", display: \"inline-block\" }}>       \r\n                    <ListGroup style={{ width: \"100%\" }} variant=\"flush\">\r\n                        {verbs.map((e: ImMonkeyData_Status, i: number) => (\r\n                            <ListGroupItem onClick={() => { updateselectedIndex(i); updateverbChanged(false) }} style={{ backgroundColor: (selectedIndex === i) ? \"Gainsboro\" : \"Transparent\"}}>\r\n                                <div style={{ width: \"100%\", display: \"inline-block\"}}>\r\n                                    <div style={{ width: \"10%\", display: \"inline-block\", textAlign: \"center\" }}>\r\n                                        {emoji.emojify(getEmojiType(e.action_type))}\r\n                                    </div>\r\n                                    <div style={{ width: \"40%\", display:\"inline-block\", textAlign:\"center\"}}>\r\n                                        {\r\n                                            selectedIndex === i\r\n                                                ?\r\n                                                <input type=\"text\" ref={itemInput} onChange={() => { if (itemInput.current && (e.status !== itemInput.current.value)) { updateverbChanged(true) } }} defaultValue={e.status} style={{ width: \"95%\", border: 0, textAlign:\"center\", backgroundColor: \"Transparent\", color: \"darkblack\" }} />\r\n                                                :\r\n                                                <span>{e.status}</span>\r\n\r\n                                        }\r\n                                    </div>\r\n                                    <div style={{ width: \"40%\", display: \"inline-block\", textAlign: \"center\"}}>\r\n                                        {\r\n                                            selectedIndex === i\r\n                                                ?\r\n                                                <input type=\"text\" ref={verbInput} onChange={() => { if (verbInput.current && (e.status_verb !== verbInput.current.value)) { updateverbChanged(true) } }} defaultValue={e.status_verb} style={{ width: \"95%\", border: 0, textAlign:\"center\", backgroundColor: \"Transparent\", color: \"darkblack\" }} />\r\n                                                :\r\n                                                <span>{e.status_verb}</span>\r\n\r\n                                        }\r\n                                    </div>\r\n                                    <div style={{ width: \"10%\", display: \"inline-block\", textAlign: \"center\" }}>\r\n                                        {\r\n                                            selectedIndex === i && verbChanged\r\n                                                ?\r\n                                                <span onClick={() => { updateVerb(i)}}>{emoji.emojify(\":floppy_disk:\")}</span>\r\n                                                :\r\n                                                <></>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </ListGroupItem>\r\n                        ))\r\n                            }\r\n                    </ListGroup>\r\n                    <br />\r\n                    <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                        <Button onClick={() => { updateselectedIndex(-1);updateverbChanged(false)}}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n                : <><br /><span style={{textAlign:\"center\"}}>No Verbs Exist</span></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Navbar, Nav, NavItem, Form, InputGroup, ListGroup, Button, Image, ListGroupItem } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport './main.css';\r\nimport { getAllMonkeyData, updateMonkeyData } from '../functions/fetchfunctions';\r\nimport MonkeyMessage from './message';\r\nimport MonkeyRace from './monkeyrace';\r\nimport MonkeyItemPhoto from './itemphoto';\r\nimport { ImMonkeyData, ImMonkeyData_State, ImMonkeyData_Lookup, ImMonkeyData_Status, ImMonkeyData_Users, ImMonkeyData_UpdateParams, ImEmojiLookup, IM_emoji, emojiModeConstants } from '../constants/constants';\r\n// @ts-ignore\r\nimport Camera, { IMAGE_TYPES, FACING_MODES } from 'react-html5-camera-photo';\r\nimport { ItemEmojiConfig } from './itemconfig';\r\nconst emoji = require('node-emoji');\r\nconst emojiRegex = require('emoji-regex');\r\nconst dateFormat = require('dateformat');\r\n\r\ninterface IMyuiInterface {\r\n    updateUser: boolean;\r\n    monkeyChange: boolean;\r\n    monkeyLoaded: boolean;\r\n    showCamera: boolean;\r\n    photoTaken: boolean;\r\n    itemPhoto: any;\r\n    itemStatusList: Array<ImMonkeyData_Status>;\r\n    distinctItems: Array<ImMonkeyData_Lookup>;\r\n    users: Array<ImMonkeyData_Users>;\r\n    emojiLookup: Array<ImEmojiLookup>;\r\n};\r\n\r\ninterface IMyPropsInterface {\r\n    isAuthenticated: boolean;\r\n    user: ImMonkeyData_Users;\r\n    logOff():void;\r\n};\r\n\r\ninterface IMyStateInterface {\r\n    isAuthenticated: boolean;\r\n    user: ImMonkeyData_Users;\r\n    ui: IMyuiInterface;\r\n    monkeyData: Array<ImMonkeyData_State>;\r\n    monkeyDance: boolean;\r\n    monkeyRace: boolean;\r\n    monkeyItemPhoto: any;\r\n    emojiConfig: boolean;\r\n    selectedEmoji: ImMonkeyData_Lookup;\r\n    selectedEmojiIndex: number;\r\n};\r\n\r\nclass Main extends React.Component<IMyPropsInterface, IMyStateInterface> {\r\n    private newItem: any;\r\n    private addItem: any;\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);\r\n        this.state = {\r\n            isAuthenticated: props.isAuthenticated,\r\n            user: props.user,\r\n            monkeyDance: false,\r\n            monkeyRace: false,\r\n            monkeyItemPhoto:null,\r\n            ui: {\r\n                updateUser: false,\r\n                monkeyChange: false,\r\n                monkeyLoaded: false,\r\n                showCamera: false,\r\n                photoTaken: false,\r\n                itemPhoto: null,\r\n                itemStatusList: [],\r\n                distinctItems: [],\r\n                users: [],\r\n                emojiLookup: [],\r\n            },\r\n            monkeyData: [],\r\n            emojiConfig: false,\r\n            selectedEmoji: { item: \"\", code: \"\" },\r\n            selectedEmojiIndex: -1,\r\n        }\r\n        this.newItem = React.createRef();\r\n        this.addItem = React.createRef();\r\n        this.monkeyItemAction = this.monkeyItemAction.bind(this);\r\n        this.monkeyItemAction_Do = this.monkeyItemAction_Do.bind(this);\r\n        this.lookupStatus = this.lookupStatus.bind(this);\r\n        this.addMonkeyItem = this.addMonkeyItem.bind(this);\r\n        this.monkeyDo = this.monkeyDo.bind(this);\r\n        this.monkeyAll = this.monkeyAll.bind(this);\r\n        this.monkeyDanceToggle = this.monkeyDanceToggle.bind(this);\r\n        this.monkeyRaceToggle = this.monkeyRaceToggle.bind(this);\r\n        this.getBananaCount = this.getBananaCount.bind(this);\r\n        this.onTakePhoto = this.onTakePhoto.bind(this);\r\n        this.toggleCamera = this.toggleCamera.bind(this);\r\n        this.getEmojiMatch = this.getEmojiMatch.bind(this);\r\n        this.changeEmoji = this.changeEmoji.bind(this);\r\n        this.changeSelectedEmoji = this.changeSelectedEmoji.bind(this);\r\n        this.changeMonkeyQuantity = this.changeMonkeyQuantity.bind(this);\r\n\r\n    }\r\n\r\n    changeMonkeyQuantity(monkeyIndex: number, increment: number) {\r\n        let newMonkeyDataState: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n        let newMonkeyUI: IMyuiInterface = this.state.ui;\r\n        let newItemCount: number = this.state.monkeyData[monkeyIndex].itemCount + increment;\r\n        if (newItemCount > 1) {\r\n            newMonkeyDataState[monkeyIndex].itemCount = newItemCount\r\n        } else {\r\n            newMonkeyDataState[monkeyIndex].itemCount = 1\r\n        }\r\n        newMonkeyDataState[monkeyIndex].itemChanged = true;\r\n        let statusLookup: ImMonkeyData_Status | undefined = this.state.ui.itemStatusList.find((e: ImMonkeyData_Status) => (e.status_active));\r\n        if (!this.state.monkeyData[monkeyIndex].itemNew) {\r\n            newMonkeyDataState[monkeyIndex].itemActionType = statusLookup ? statusLookup.action_type : 0\r\n        }\r\n        newMonkeyUI.monkeyChange = true;\r\n        this.setState(() => ({\r\n            monkeyData: newMonkeyDataState,\r\n            ui: newMonkeyUI,\r\n        }))\r\n    }\r\n\r\n    getEmojiMatch(itemName: string): string {\r\n        let matchEmoji: ImMonkeyData_Lookup | undefined = this.state.ui.distinctItems.find((item)=>(item.item===itemName))        \r\n        if (matchEmoji) {\r\n            return matchEmoji.code;\r\n        } else {\r\n            let itemName_lcase: string = itemName.toLowerCase();\r\n            if (itemName_lcase.substr(itemName_lcase.length - 1) === 's') { itemName_lcase = itemName_lcase.slice(0, -1) }\r\n            let emojiLookupMatch: ImEmojiLookup | undefined = this.state.ui.emojiLookup.find((item) => (itemName_lcase.includes(item.key)));\r\n\r\n            if (emojiLookupMatch) {\r\n                return emojiLookupMatch.code;\r\n            } else {\r\n                let searchList: Array<IM_emoji> = emoji.search(itemName_lcase);\r\n                if (searchList.length) {\r\n                    return ':' + searchList[0].key + ':';\r\n                } else {\r\n                    return ':shopping_trolley:';\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onTakePhoto(dataURI: any): void {\r\n        let tempUI: IMyuiInterface = this.state.ui;\r\n        tempUI.photoTaken = true;\r\n        tempUI.itemPhoto = dataURI;\r\n        tempUI.showCamera = false;\r\n        this.setState(() => { return { ui: tempUI } })\r\n    }\r\n\r\n    getBananaCount(user_id: number): number | undefined {\r\n        var lookupUserBananas: Array<ImMonkeyData_Users>;\r\n        lookupUserBananas = this.state.ui.users.filter((el) => (el.user_id === user_id));\r\n        if (lookupUserBananas.length) {\r\n            return lookupUserBananas[0].banana_count;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    lookupStatus(status: string): any {\r\n        var lookupStatus: Array<ImMonkeyData_Status>;\r\n        lookupStatus = this.state.ui.itemStatusList.filter((el) => (el.statusID === parseInt(status)));\r\n        return lookupStatus.length ? {\r\n            actionType: lookupStatus[0].action_type,\r\n            status: lookupStatus[0].status,\r\n            status_verb: lookupStatus[0].status_verb,\r\n            status_active: lookupStatus[0].status_active,\r\n        }\r\n            : { actionType: 0, status: 0, status_verb:'', status_active: false };\r\n    }\r\n\r\n\r\n    monkeyItemAction(event: any, eventitemOrdinal: number): void {\r\n        event.preventDefault();\r\n        this.monkeyItemAction_Do(event.target.value, eventitemOrdinal);\r\n    }\r\n\r\n\r\n    monkeyItemAction_Do(eventVal: string, eventitemOrdinal: number): void {\r\n        const itemOrdinal: number = eventitemOrdinal;\r\n        var newState: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n        var lookupObj: any = this.lookupStatus(eventVal);\r\n\r\n        //console.log(lookupObj);\r\n        newState[itemOrdinal].itemActionType = lookupObj.actionType;\r\n        newState[itemOrdinal].itemStatus = lookupObj.status;\r\n        newState[itemOrdinal].itemStatusID = parseInt(eventVal);\r\n        newState[itemOrdinal].itemStatusVerb = lookupObj.status_verb;\r\n        newState[itemOrdinal].itemStatusActive = lookupObj.status_active;\r\n        newState[itemOrdinal].itemUserID = this.state.user.user_id;\r\n        newState[itemOrdinal].itemUserName = this.state.user.name;\r\n        newState[itemOrdinal].itemChanged = true;\r\n\r\n        this.setState(() => {\r\n            return {\r\n                monkeyData: newState, ui: {\r\n                    updateUser: this.state.ui.updateUser,\r\n                    itemStatusList: this.state.ui.itemStatusList,\r\n                    distinctItems: this.state.ui.distinctItems,\r\n                    users: this.state.ui.users,\r\n                    monkeyChange: true,\r\n                    monkeyLoaded: true,\r\n                    showCamera: false,\r\n                    photoTaken: false,\r\n                    itemPhoto: null,\r\n                    emojiLookup: this.state.ui.emojiLookup,\r\n                } } });\r\n    }\r\n\r\n\r\n    getMonkeyData(): void {\r\n        const getMonkeyDataCB = (mData: ImMonkeyData) => {\r\n            var new_monkeyData: Array<ImMonkeyData_State> = [];\r\n            for (var i = 0; i < mData.groceryListItems.length; i++) {\r\n                new_monkeyData.push(\r\n                    {\r\n                        itemNew: false,\r\n                        itemActionType: 0,\r\n                        itemID: mData.groceryListItems[i].grocery_list_id,\r\n                        itemDate: mData.groceryListItems[i].date,\r\n                        itemName: mData.groceryListItems[i].item,\r\n                        itemCount: mData.groceryListItems[i].count,\r\n                        itemCode: mData.groceryListItems[i].code,\r\n                        itemNotes: mData.groceryListItems[i].notes,\r\n                        itemStatusID: mData.groceryListItems[i].status_id,\r\n                        itemStatus: mData.groceryListItems[i].status,\r\n                        itemStatusVerb: mData.groceryListItems[i].status_verb,\r\n                        itemStatusActive: mData.groceryListItems[i].status_active,\r\n                        itemUserID: mData.groceryListItems[i].user_id,\r\n                        itemUserName: mData.groceryListItems[i].username,\r\n                        itemChanged: false,\r\n                        itemPhoto: mData.groceryListItems[i].photo,\r\n                        itemPhotoURI: mData.groceryListItems[i].photo_location,\r\n                    }\r\n                )\r\n            }\r\n            const new_ui: IMyuiInterface = {\r\n                updateUser: false,\r\n                monkeyChange: false,\r\n                monkeyLoaded: true,\r\n                showCamera: false,\r\n                photoTaken: false,\r\n                itemPhoto: null,\r\n                itemStatusList: mData.groceryItemStatus,\r\n                distinctItems: mData.distinctGroceryListItems,\r\n                users: mData.users,\r\n                emojiLookup: mData.emojilookup,\r\n            };\r\n            this.setState(() => { return { monkeyData: new_monkeyData, ui: new_ui } });\r\n        }\r\n        getAllMonkeyData(this.state.isAuthenticated, getMonkeyDataCB.bind(this));\r\n    }\r\n\r\n    addMonkeyItem(newItemString:string) {\r\n        if (newItemString.length > 0 || this.state.ui.photoTaken) {\r\n            let newItemStringTest: string = newItemString.length ? newItemString : \"Photo Only\";\r\n            var newItemDetails: Array<string> = newItemStringTest.split(',');\r\n            var newMonkeyItemList: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n            var newItemStrip: string = '';\r\n            var newItem: string = '';\r\n            var newQuantity: number = 0;\r\n            var newNotes: string = '';\r\n\r\n  //        var regex: RegExp = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\r\n\r\n            let regex: RegExp = emojiRegex();\r\n\r\n            newItemStrip = newItemDetails[0].replace(regex,'');\r\n            newItem = newItemStrip.charAt(0).toUpperCase() + newItemStrip.slice(1).toLowerCase();\r\n\r\n            if (newItemDetails.length === 2) { newItemDetails[1].length ? newQuantity = parseInt(newItemDetails[1]):newQuantity = 0 }\r\n            else if (newItemDetails.length === 3) { newQuantity = parseInt(newItemDetails[1]); newNotes = newItemDetails[2] }\r\n\r\n            newMonkeyItemList.push({\r\n                itemNew: true,\r\n                itemName: newItem,\r\n                itemCount: newQuantity,\r\n                itemNotes: newNotes,\r\n                itemStatusID: 1,\r\n                itemStatus: \"NEW\",\r\n                itemStatusVerb: 'NEEDS',\r\n                itemStatusActive: true,\r\n                itemActionType: 1,\r\n                itemUserID: this.state.user.user_id,\r\n                itemUserName: this.state.user.name,\r\n                // itemCode: searchEmoji(newItem),\r\n                itemCode: this.getEmojiMatch(newItem),\r\n                itemDate: dateFormat(new Date(),\"yyyy-mm-dd HH:MM:ss\"),\r\n                itemID: 0,\r\n                itemChanged: false,\r\n                itemPhoto: this.state.ui.photoTaken,\r\n                itemPhotoURI: this.state.ui.photoTaken ? this.state.ui.itemPhoto : null,\r\n            })\r\n\r\n            this.newItem.getInstance().clear();\r\n            this.setState(() => {\r\n                return {\r\n                    monkeyData: newMonkeyItemList,\r\n                    ui: {\r\n                        updateUser: this.state.ui.updateUser,\r\n                        itemStatusList: this.state.ui.itemStatusList,\r\n                        distinctItems: this.state.ui.distinctItems,\r\n                        users: this.state.ui.users,\r\n                        monkeyChange: true,\r\n                        monkeyLoaded: true,\r\n                        showCamera: false,\r\n                        photoTaken: false,\r\n                        itemPhoto: null,\r\n                        emojiLookup: this.state.ui.emojiLookup,\r\n                    }\r\n                }\r\n            })  \r\n        }\r\n    }\r\n\r\n    monkeyDo(): void {\r\n        if (this.state.ui.monkeyChange) {\r\n            var monkeyDataVar: ImMonkeyData_UpdateParams = { userName: this.state.user.name, userID: this.state.user.user_id, monkeyData: this.state.monkeyData };\r\n            console.log(monkeyDataVar);\r\n            updateMonkeyData(monkeyDataVar, (success: boolean) => {\r\n                if (success) {\r\n                    this.getMonkeyData();\r\n                    this.setState(() => { return { monkeyDance: true } })\r\n                } else {\r\n                    alert('Error updating database');\r\n                }\r\n            })\r\n        } else {\r\n            this.props.logOff();\r\n        }\r\n    }\r\n\r\n    monkeyAll(): void {\r\n        var newMonkeyState: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n        for (var i: number = 0; i < newMonkeyState.length; i++) {\r\n            var monkeyAllStatus: number = this.state.ui.itemStatusList[this.state.ui.itemStatusList.length - 1].statusID;\r\n            var lookupObj: any = this.lookupStatus(monkeyAllStatus.toString());\r\n\r\n            newMonkeyState[i].itemActionType = lookupObj.actionType;\r\n            newMonkeyState[i].itemStatus = lookupObj.status;\r\n            newMonkeyState[i].itemStatusID = monkeyAllStatus;\r\n            newMonkeyState[i].itemStatusVerb = lookupObj.status_verb;\r\n            newMonkeyState[i].itemStatusActive = lookupObj.status_active;\r\n            newMonkeyState[i].itemUserID = this.state.user.user_id;\r\n            newMonkeyState[i].itemUserName = this.state.user.name;\r\n            newMonkeyState[i].itemChanged = true;\r\n        }\r\n\r\n        this.setState(() => {\r\n            return {\r\n                monkeyData: newMonkeyState, ui: {\r\n                    updateUser: this.state.ui.updateUser,\r\n                    itemStatusList: this.state.ui.itemStatusList,\r\n                    distinctItems: this.state.ui.distinctItems,\r\n                    users: this.state.ui.users,\r\n                    monkeyChange: true,\r\n                    monkeyLoaded: true,\r\n                    showCamera: false,\r\n                    photoTaken: false,\r\n                    itemPhoto: null,\r\n                    emojiLookup: this.state.ui.emojiLookup,\r\n                } } });\r\n    }\r\n\r\n    toggleCamera(arg:boolean) {\r\n        let newUI: IMyuiInterface = this.state.ui;\r\n        newUI.showCamera = arg;\r\n        newUI.photoTaken = false;\r\n        newUI.itemPhoto = null;\r\n        this.setState(() => {\r\n            return {ui:newUI}\r\n            }\r\n        )\r\n    }\r\n\r\n    changeSelectedEmoji(itemIndex: number): void {\r\n        if (itemIndex >= 0) {\r\n            this.setState(() => (\r\n                {\r\n                    emojiConfig: true,\r\n                    selectedEmoji: { code: this.state.monkeyData[itemIndex].itemCode, item: this.state.monkeyData[itemIndex].itemName },\r\n                    selectedEmojiIndex: itemIndex,\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    changeEmoji(newEmoji: IM_emoji): void {\r\n        let newMonkeyData_State: Array<ImMonkeyData_State> = this.state.monkeyData;\r\n        newMonkeyData_State[this.state.selectedEmojiIndex].itemCode = ':' + newEmoji.key + ':'\r\n        this.setState(() => (\r\n            {\r\n                emojiConfig: false,\r\n                monkeyData: newMonkeyData_State,\r\n                selectedEmoji: { code: \"\", item: \"\" },\r\n                selectedEmojiIndex: -1,\r\n            }\r\n        ))\r\n\r\n    }\r\n\r\n    monkeyDanceToggle() {\r\n        this.setState(() => { return { monkeyDance: !this.state.monkeyDance } })\r\n    }\r\n\r\n    monkeyRaceToggle() {\r\n        this.setState(() => { return { monkeyRace: !this.state.monkeyRace } })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMonkeyData();\r\n    }\r\n\r\n    render() {\r\n        return (    \r\n            <div className=\"Main\" style={{display:\"inline-block\"}}>\r\n                <MonkeyMessage show={this.state.monkeyDance} monkeyDanceToggle={this.monkeyDanceToggle} logOff={this.props.logOff} />\r\n                <MonkeyRace show={this.state.monkeyRace} users={this.state.ui.users} monkeyRaceToggle={this.monkeyRaceToggle} logOff={this.props.logOff} />\r\n                <MonkeyItemPhoto itemPhotoLocation={this.state.monkeyItemPhoto} showItemToggle={() => { this.setState(() => { return { monkeyItemPhoto: null } })}}/>\r\n                <ItemEmojiConfig show={this.state.emojiConfig} toggleEmojiConfig={() => { this.setState(() => ({ emojiConfig: !this.state.emojiConfig })) }} mode={emojiModeConstants.select} selectedItem={this.state.selectedEmoji} selectNewEmoji={this.changeEmoji}/>\r\n                <Navbar fixed=\"top\" sticky=\"top\" bg=\"light\" expand=\"xl\" style={{ textAlign: \"left\", verticalAlign: \"middle\", flexDirection: \"row\" }} onToggle={() => { this.toggleCamera(false) }} >\r\n                    <Navbar.Brand  >\r\n                        <Image\r\n                            src=\"/images/favicon.ico\"\r\n                            style={{ width: \"30px\", height: \"30px\", cursor: \"pointer\" }}\r\n                            onClick={() => (this.props.logOff())}\r\n                        />\r\n                        <span style={{ visibility: \"hidden\" }}>X</span>\r\n                        <label>{'   Grocery Monkey - ' + this.state.user.name}</label>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\" style={{ width: \"100%\" }}>\r\n                        <div style={{ width: \"100%\", display: \"flex\", textAlign: \"left\", float: \"left\", clear:\"left\" }}>\r\n                            <InputGroup style={{ width: \"100%\" }}>\r\n                                <InputGroup.Prepend>\r\n                                    < Button variant={this.state.ui.photoTaken ? \"primary\" : \"outline-primary\"} onClick={() => { this.toggleCamera(!this.state.ui.showCamera); }} >\r\n                                        {emoji.emojify(this.state.ui.photoTaken ? \":camera_with_flash:\" : \":camera:\")}\r\n\r\n{/* Uses picture in lieu of emoji\r\n                                        <Image\r\n                                            roundedCircle\r\n                                            src=\"/images/camera.png\"\r\n                                            style={{ width: \"20px\", height: \"20px\", cursor:\"pointer\" }}\r\n                                        />\r\n*/}\r\n\r\n\r\n                                    </Button>\r\n                                </InputGroup.Prepend>\r\n                                <Typeahead                                              \r\n                                        id=\"groceryTypeahead\"\r\n                                        selectHintOnEnter\r\n                                        options={this.state.ui.distinctItems.map((el: any, k: number) => { return emoji.emojify(el.code) + el.item })}\r\n                                        placeholder=\"Item, Quantity, Notes\"\r\n                                        clearButton\r\n                                        labelKey=\"item\"\r\n                                        emptyLabel=\"\"\r\n                                        ref={(typeahead: any) => this.newItem = typeahead}\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    {/*< Button variant=\"outline-info\" ref={this.addItem} onClick={() => (this.addMonkeyItem(this.newItem.getInstance().getInput().value))}> {emoji.emojify(\":fork_and_knife:\")}</Button>*/}\r\n                                    < Button variant=\"outline-success\" ref={this.addItem} onClick={() => (this.addMonkeyItem(this.newItem.getInstance().getInput().value))} >{emoji.emojify(\":heavy_plus_sign:\")}</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <div >\r\n                    {this.state.ui.showCamera ?\r\n                        <div style={{ width: \"100%\", height: \"25%\" }}>\r\n                            <Camera\r\n                                onTakePhoto={(dataUri: any) => { this.onTakePhoto(dataUri); }}\r\n                                imageType={IMAGE_TYPES.JPG}\r\n                                imageCompression={0.97}\r\n                                isMaxResolution={false}\r\n                                idealFacingMode={FACING_MODES.ENVIRONMENT}\r\n                                isDisplayStartCameraError={true}\r\n                                isImageMirror={false}\r\n                            />\r\n                            <br />\r\n                        </div>\r\n\r\n                        : null\r\n                    }             \r\n                    {this.state.monkeyData.length ?\r\n                        <ListGroup style={{width:\"100%\"}}>\r\n                            {this.state.monkeyData.map((item: ImMonkeyData_State, i: number) => {\r\n                                return (\r\n                                    <ListGroupItem key={i} style={{ display: \"flex\", width: \"100%\", alignItems: \"center\", backgroundColor: this.state.monkeyData[i].itemChanged ? \"Gainsboro\" : \"Transparent\" }}>\r\n                                        <div style={{width:\"100%\", display:\"inline-block\"}}>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: \"20%\",\r\n                                                    textAlign: \"center\",\r\n                                                    display: \"inline-block\",\r\n                                                    backgroundColor: \"Transparent\",\r\n                                                    cursor: item.itemPhoto ? \"pointer\" : \"default\",\r\n                                                }}\r\n                                            >\r\n                                                <Image className=\"list_profile_img\"\r\n                                                    src={item.itemPhoto ?\r\n                                                        item.itemNew ? item.itemPhotoURI : './images/items/' + item.itemPhotoURI + '.jpg'\r\n                                                        : './images/users/' + item.itemUserID + '.jpg#' + new Date().getTime()}\r\n                                                    roundedCircle\r\n                                                    onClick={() => {\r\n                                                        this.setState(() => {\r\n                                                            return {\r\n                                                                monkeyItemPhoto: item.itemPhoto ?\r\n                                                                    item.itemNew ? item.itemPhotoURI : './images/items/' + item.itemPhotoURI + '.jpg'\r\n                                                                    : './images/users/' + item.itemUserID + '.jpg#' + new Date().getTime()\r\n                                                            }\r\n                                                        })\r\n                                                    }}\r\n                                                    style={{height:\"60px\", width:\"60px\"}}\r\n                                                />\r\n                                                <br />\r\n                                                {item.itemUserName}\r\n                                            </div>\r\n                                            <div style={{ width: \"10%\", textAlign: \"center\", display: \"inline-block\", verticalAlign:\"top\" }}>\r\n                                                <label style={{ cursor: \"pointer\" }} onClick={() => { this.changeSelectedEmoji(i) }}>\r\n                                                    {emoji.emojify(item.itemCode)}\r\n                                                </label>\r\n                                            </div>\r\n                                            <div style={{ width: \"70%\", textAlign: \"left\", display: \"inline-block\", verticalAlign:\"top\" }}>  \r\n                                                <label style={{ cursor: \"pointer\", display:\"inline-block\", width:\"100%\" }}  >\r\n                                                    <span style={{ fontWeight: \"bold\", wordWrap:\"break-word\" }} onClick={!this.state.monkeyData[i].itemNew ? () => { this.monkeyItemAction_Do((this.state.ui.itemStatusList.length).toString(), i) } : () => { }}>{item.itemName}</span>\r\n                                                    <br />\r\n                                                    Quantity: <span style={{ fontWeight: \"bold\", display:\"inline\" }}>{item.itemCount ? item.itemCount : \"1\"}</span>\r\n                                                    <span style={{ visibility: \"hidden\" }}>XXX</span>\r\n                                                    <label style={{ display: \"inline\" }} onClick={() => { this.changeMonkeyQuantity(i,1)}}>{emoji.emojify(\":heavy_plus_sign:\")}</label>\r\n                                                    <span style={{ visibility: \"hidden\" }}>X</span>\r\n                                                    <label style={{ display: \"inline\" }} onClick={() => { this.changeMonkeyQuantity(i,-1)}}>{item.itemCount > 1 ? emoji.emojify(\":heavy_minus_sign:\") : \"\"}</label>\r\n                                                    <br />\r\n                                                    Notes: <span style={{fontWeight:\"bold\", wordWrap:\"break-word\", display:\"inline\"}}>{item.itemNotes}</span>\r\n                                                </label>\r\n                                            </div>\r\n                                            <div style={{ width: \"100%\", textAlign: \"right\" }}>\r\n                                                <div style={{ width: \"63%\", textAlign: \"center\", display: \"inline-block\" }}>\r\n                                                    <span style={{ fontWeight: \"bold\" }}>\r\n                                                        <i>\r\n                                                            {this.state.monkeyData[i].itemChanged ? this.state.monkeyData[i].itemUserName + \" \" + this.state.monkeyData[i].itemStatusVerb + \" it!\": \"\"}\r\n                                                        </i>\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div style={{ width: \"37%\", display: \"inline-block\"}}>\r\n                                                    <Form>\r\n                                                        <Form.Control style={{ width: \"100%\", textAlign:\"center\", textAlignLast:\"center\" }} as=\"select\" value={item.itemStatusID.toString()} onChange={(event: any) => this.monkeyItemAction(event, i)} >\r\n                                                            {this.state.ui.itemStatusList.filter((el) => {\r\n                                                                const isSame: boolean = (this.state.user.user_id === item.itemUserID) || el.action_sameuser;\r\n                                                                return (item.itemNew ? el.action_new && isSame : isSame)\r\n                                                            })\r\n                                                                .map((lookup_item: ImMonkeyData_Status, k: number) => {\r\n                                                                    return <option key={k} value={lookup_item.statusID.toString()} > {lookup_item.status}</option>\r\n                                                                })}\r\n                                                        </Form.Control>\r\n                                                    </Form>    \r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </ListGroupItem>\r\n                                )\r\n                            })}\r\n                        </ListGroup>\r\n                        : this.state.ui.monkeyLoaded && !this.state.ui.showCamera ?\r\n                            <div style={{ width: \"100%\", alignContent: \"center\", textAlign:\"center\" }}>\r\n                                <br /><br />\r\n                                <Image id=\"sad_fridge\" src='./images/sad_fridge.gif' />\r\n                                <h4><i>Ain't nobody need nothin....</i></h4>\r\n                           </div>\r\n                            :null\r\n                        }\r\n                        <br /><br/>\r\n                    </div>\r\n                    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\" fixed=\"bottom\" >\r\n                            <Nav style={{ textAlign: \"left\", width: \"32%\" }}>\r\n                                <div style={{ width: \"100%\", verticalAlign: \"center\" }}>\r\n                                    <NavItem as={Link} to='/user'>\r\n                                        <Image\r\n                                    alt=\"\"\r\n                                    src={'./images/users/' + this.state.user.user_id + '.jpg#' + new Date().getTime()}\r\n                                            width=\"40\"\r\n                                            height=\"40\"\r\n                                            className=\"profile_Image\"\r\n                                            roundedCircle                              \r\n                                        />\r\n                                    </NavItem>\r\n                                    <span style={{ visibility: \"hidden\" }}>X</span>\r\n                                    <span style={{ color: \"white\", fontWeight: \"bold\", cursor:\"pointer\" }} onClick={()=>(this.monkeyRaceToggle())} >\r\n                                        {emoji.emojify(\":banana:\") + '(' + this.getBananaCount(this.state.user.user_id) + ')'}\r\n                                    </span>                           \r\n                                </div>\r\n                            </Nav>\r\n                            <Nav style={{ textAlign:\"right\",width:\"68%\" }}>\r\n                                <div style={{ width: \"100%\", textAlign: \"right\" }}>\r\n                                    <Button variant=\"light\" onClick={() => this.monkeyAll()}>Monkey All</Button>\r\n                                    <span>{\"  \"}</span>\r\n                                    <Button variant=\"light\" onClick={() => this.monkeyDo()} >\r\n                                        {this.state.ui.monkeyChange? 'Monkey Do' : 'Logoff'}\r\n                                    </Button>\r\n                                </div>\r\n                            </Nav>\r\n                        </Navbar>\r\n                    </div> \r\n        )\r\n    }   \r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Image, Card, Form, Col, Button, Row, Modal} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './user.css';\r\nimport '../functions/fetchfunctions';\r\nimport { ImMonkeyData_Users } from '../constants/constants';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\n// @ts-ignore\r\nimport Camera, { IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport { updateUserSelfie } from '../functions/fetchfunctions';\r\n\r\n\r\n\r\n\r\ninterface IMyStateInterface {\r\n    changeUser: boolean;\r\n    newSelfie: boolean;\r\n    userSelfie: any;\r\n    selfieChange: boolean;\r\n}\r\n\r\ninterface IMyPropsInterface {\r\n    auth: boolean;\r\n    user: ImMonkeyData_Users;\r\n    updateUser: Function;\r\n}\r\n\r\nclass User extends React.Component<IMyPropsInterface, IMyStateInterface>{\r\n    private userSelfieSubmit: any;\r\n    private userName: any;\r\n    private PIN: any;\r\n    private email: any;\r\n    private sms: any;\r\n    private notify: any;\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);\r\n        this.userSelfieSubmit = React.createRef();\r\n        this.userName = React.createRef();\r\n        this.PIN = React.createRef();\r\n        this.email = React.createRef();\r\n        this.sms = React.createRef();\r\n        this.notify = React.createRef();\r\n        this.state = { changeUser: false, newSelfie: false, userSelfie: './images/users/' + props.user.user_id + '.jpg#' + new Date().getTime(), selfieChange:false };\r\n        this.needSave = this.needSave.bind(this);\r\n        this.updateUserLocal = this.updateUserLocal.bind(this);\r\n        this.toggleSelfie = this.toggleSelfie.bind(this);\r\n        this.onTakePhoto = this.onTakePhoto.bind(this);\r\n    }\r\n\r\n    needSave(): void {\r\n        if (!this.state.changeUser) { this.setState(() => { return { changeUser: true } }) };\r\n    }\r\n\r\n    updateUserLocal(event: any): void {\r\n        event.preventDefault();\r\n        const params = {\r\n            user_id: this.props.user.user_id,\r\n            name: this.userName.current.value,\r\n            pin: this.PIN.current.value,\r\n            email: this.email.current.value,\r\n            sms: this.sms.current.value,\r\n            notify: this.notify.current.checked\r\n        };\r\n\r\n        if (this.state.selfieChange) { updateUserSelfie(this.props.user.user_id + \"\", this.state.userSelfie, (success: boolean) => { console.log('File uploaded: ' + success) }) };\r\n        this.props.updateUser(params, () => (this.setState(() => { return { changeUser: false, selfieChange:false } })));\r\n    }\r\n\r\n    onTakePhoto(dataURI: any): void {\r\n        //alert(dataURI);\r\n        this.setState(() => {\r\n            return { userSelfie: dataURI, newSelfie: false, changeUser: true, selfieChange:true }\r\n        });\r\n    }\r\n\r\n    toggleSelfie(): void {\r\n        this.setState(() => { return { newSelfie: !this.state.newSelfie } });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                <div style={{ width: \"90%\", display: \"inline-block\" }}>\r\n                    <MonkeyPicture show={this.state.newSelfie} user={this.props.user} onTakePhoto={this.onTakePhoto} toggleSelfie={this.toggleSelfie} />\r\n                    <br />\r\n                    <Form onSubmit={this.updateUserLocal}>\r\n                        <Card bg=\"light\" style={{ width: \"100%\", textAlign: \"left\" }}>\r\n                            <Card.Header>\r\n\r\n                                <div style={{ width: \"100%\", display:\"inline-block\" }}>\r\n                                    <div style={{ display: \"inline-block\", textAlign: \"left\", width: \"50%\" }}>\r\n                                        <Image roundedCircle style={{ width: \"40px\", height: \"40px\", cursor: \"pointer\" }} src={this.state.userSelfie} onClick={() => { this.toggleSelfie() }} />\r\n                                        <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>{ this.props.user.name }</span>\r\n                                    </div>\r\n                                    <div style={{display:\"inline-block\",width:\"50%\",textAlign:\"right\"}}>\r\n                                        <Form.Group>  \r\n                                            <Link to='/main'><Button >Back</Button></Link>\r\n                                            <span style={{ visibility: \"hidden\" }}>{'  '}</span>\r\n                                            <Button disabled={!this.state.changeUser} type=\"submit\" >Save</Button>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                                    <Form.Label column sm={2}>\r\n                                        User Name\r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.userName} onChange={() => this.needSave()} placeholder=\"User Name\" defaultValue={this.props.user.name} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} controlId=\"formHorizontalPIN\">\r\n                                    <Form.Label column sm={2}>\r\n                                        PIN\r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.PIN} onChange={() => this.needSave()} type=\"password\" placeholder=\"PIN\" defaultValue={this.props.user.pin} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n                                    <Col sm={{ span: 10, offset: 2 }}>\r\n                                        <Form.Check ref={this.notify} onChange={() => this.needSave()} label=\"Grocery Monkey Notifications\" defaultChecked={this.props.user.notify} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                    <Form.Label column sm={2}>\r\n                                        Email\r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.email} onChange={() => this.needSave()} type=\"email\" placeholder=\"Email\" defaultValue={this.props.user.email} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group as={Row} type=\"email\" controlId=\"formHorizontalSMS\">\r\n                                    <Form.Label column sm={2}>\r\n                                        SMS \r\n                                    </Form.Label>\r\n                                    <Col sm={10}>\r\n                                        <Form.Control ref={this.sms} onChange={() => this.needSave()} placeholder=\"SMS\" defaultValue={this.props.user.sms} />\r\n                                    </Col>\r\n                                </Form.Group>\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface IM_MonkeyPicture_Props {\r\n    show: boolean;\r\n    user: ImMonkeyData_Users;\r\n    onTakePhoto: Function;\r\n    toggleSelfie: Function;\r\n}\r\n\r\ninterface IM_MonkeyPicture_State {}\r\n\r\nclass MonkeyPicture extends React.Component<IM_MonkeyPicture_Props, IM_MonkeyPicture_State> {\r\n    render() {\r\n        return (\r\n            <Modal size=\"lg\" show={this.props.show} animation centered onHide={() => { this.props.toggleSelfie() }}>\r\n                <Modal.Header translate closeButton >\r\n                    <Image fluid roundedCircle style={{ width: \"40px\", height: \"40px\" }} src={'./images/users/' + this.props.user.user_id + '.jpg'} />\r\n                    <span style={{ visibility: \"hidden\" }}>X</span>\r\n                    <Modal.Title>{this.props.user.name + \"'s new selfie\"} </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Camera\r\n                        onTakePhoto={(dataUri: any) => { this.props.onTakePhoto(dataUri); }}\r\n                        imageType={IMAGE_TYPES.JPG}\r\n                        imageCompression={0.97}\r\n                        isMaxResolution={false}\r\n                    />\r\n                </Modal.Body>\r\n            </ Modal>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport { Image, Card, Form, Col, Button, Row, Tabs, Tab} from 'react-bootstrap';\r\nimport './config.css';\r\nimport { ImMonkeyData_Users, ImConfig } from '../constants/constants';\r\nimport { updateConfigInfo, updateUser, createUser, deleteUser } from '../functions/fetchfunctions';\r\nimport { ItemCleanup, EmojiKeyPair, ItemsVerbs } from './itemconfig';\r\nconst emoji = require('node-emoji');\r\n\r\ninterface IMUser_Refs {\r\n    name: any;\r\n    pin: any;\r\n    email: any;\r\n    sms: any;\r\n    notify: any;\r\n}\r\n\r\ninterface IMyStateInterface {\r\n    changeConfig: boolean;\r\n    userChange: Array<boolean>;\r\n    newChange: boolean;\r\n}\r\n\r\ninterface IMyPropsInterface {\r\n    isAuthenticated: boolean;\r\n    isAdmin: boolean;\r\n    logOff: Function;\r\n    config: ImConfig;\r\n    users: Array<ImMonkeyData_Users>;\r\n    getUserData: Function;\r\n}\r\n\r\nclass Config extends React.Component<IMyPropsInterface, IMyStateInterface>{\r\n    private adminPin: any;\r\n    private notifications: any;\r\n    private emailUserName: any;\r\n    private emailUserPassword: any;\r\n    private smtpServer: any;\r\n    private portNumber: any;\r\n    private ssl: any;\r\n    private domain: any;\r\n    private emailAlias: any;\r\n    private appURL: any;\r\n    private httpPort: any;\r\n    private httpsPort: any;\r\n\r\n    private userRefs: Array<IMUser_Refs>;\r\n\r\n    private newName: any;\r\n    private newPIN: any;\r\n\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);\r\n        this.adminPin = React.createRef();\r\n        this.notifications = React.createRef();\r\n        this.emailUserName = React.createRef();\r\n        this.emailUserPassword = React.createRef();\r\n        this.smtpServer = React.createRef();\r\n        this.portNumber = React.createRef();\r\n        this.ssl = React.createRef();\r\n        this.domain = React.createRef();\r\n        this.emailAlias = React.createRef();\r\n        this.appURL = React.createRef();\r\n        this.httpPort = React.createRef();\r\n        this.httpsPort = React.createRef();\r\n        this.newName = React.createRef();\r\n        this.newPIN = React.createRef();\r\n        this.userRefs = [];\r\n\r\n        this.state = {\r\n            changeConfig: false,\r\n            userChange: this.setRefs(),\r\n            newChange: false,\r\n        };\r\n\r\n        this.needSave = this.needSave.bind(this);\r\n        this.updateConfig = this.updateConfig.bind(this);\r\n        this.updateUserInfo = this.updateUserInfo.bind(this);\r\n        this.userChange = this.userChange.bind(this);\r\n        this.newUser = this.newUser.bind(this);\r\n        this.deleteUserData = this.deleteUserData.bind(this);\r\n        this.setRefs = this.setRefs.bind(this);\r\n    }\r\n\r\n    setRefs(): Array<boolean> {\r\n        this.userRefs = [];\r\n        let userChanges = [];\r\n\r\n        for (let i = 0; i < this.props.users.length; i++) {\r\n            this.userRefs.push({\r\n                name: React.createRef(),\r\n                pin: React.createRef(),\r\n                email: React.createRef(),\r\n                sms: React.createRef(),\r\n                notify: React.createRef(),\r\n            })\r\n            userChanges.push(false)\r\n        }\r\n\r\n        return userChanges;\r\n    }\r\n\r\n    needSave(): void {\r\n        if (!this.state.changeConfig) { this.setState(() => { return { changeConfig: true } }) };\r\n    }\r\n\r\n    newUser(): void {\r\n        if (this.newName.current.value.length && this.newPIN.current.value.length) {\r\n            let params: ImMonkeyData_Users = {\r\n                user_id: -1,\r\n                name: this.newName.current.value,\r\n                pin: this.newPIN.current.value,\r\n                email: \"\",\r\n                sms: \"\",\r\n                notify: false,\r\n            }\r\n            createUser(params, (success: boolean) => {\r\n                if (success) {\r\n                    this.userRefs.push({\r\n                        name: React.createRef(),\r\n                        pin: React.createRef(),\r\n                        email: React.createRef(),\r\n                        sms: React.createRef(),\r\n                        notify: React.createRef(),\r\n                    })\r\n                    let userChangeArray: Array<boolean> = this.state.userChange;\r\n                    userChangeArray.push(false);\r\n                    this.props.getUserData(() => {\r\n                        this.setState(() => ({ newChange: false}))\r\n                    })\r\n                } else {\r\n                    alert(\"Error adding user\");\r\n                }\r\n            })\r\n        } else {\r\n            alert(\"Please enter User Name and PIN\");\r\n        }\r\n    }\r\n\r\n    deleteUserData(userIndex: number): void {\r\n        if (window.confirm(\"Delete \" + this.props.users[userIndex].name + \" and all of \" + this.props.users[userIndex].name + \"'s grocery list items?\\n\\nThis cannot be undone\")) {\r\n            deleteUser(this.props.users[userIndex], (success: boolean) => {\r\n                if (success) {\r\n                    this.props.getUserData(() => {\r\n                        this.setState(() => ({ newChange: false, userChange: this.setRefs() }))\r\n                    })\r\n                } else {\r\n                    alert(\"Error deleting user\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    userChange(userElement: number): void {\r\n        let userChangeArray: Array<boolean> = this.state.userChange;\r\n        userChangeArray[userElement] = true;\r\n        this.setState(() => ({ userChange: userChangeArray }));\r\n    }\r\n\r\n    updateUserInfo(userIndex: number): void {\r\n        let params: ImMonkeyData_Users = {\r\n            user_id: this.props.users[userIndex].user_id,\r\n            name: this.userRefs[userIndex].name.current.value,\r\n            pin: this.userRefs[userIndex].pin.current.value,\r\n            email: this.userRefs[userIndex].email.current.value,\r\n            sms: this.userRefs[userIndex].sms.current.value,\r\n            notify: this.userRefs[userIndex].notify.current.checked,\r\n        };\r\n\r\n        updateUser(params, (userResult:ImMonkeyData_Users) => {\r\n            if (userResult) {\r\n                let cur_userChanges: Array<boolean> = this.state.userChange;\r\n                cur_userChanges[userIndex] = false;\r\n                this.setState(() => (\r\n                    { userChange: cur_userChanges}))\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    updateConfig(event: any): void {\r\n        event.preventDefault();\r\n        const params: ImConfig = {\r\n            configID: this.props.config.configID,\r\n            adminPin: this.adminPin.current.value,\r\n            notifications: this.notifications.current.checked,\r\n            emailUserName: this.emailUserName.current.value,\r\n            emailUserPassword: this.emailUserPassword.current.value,\r\n            smtpServer: this.smtpServer.current.value,\r\n            portNumber: parseInt(this.portNumber.current.value),\r\n            ssl: this.ssl.current.checked,\r\n            domain: this.domain.current.value,\r\n            emailAlias: this.emailAlias.current.value,\r\n            appURL: this.appURL.current.value,\r\n            httpPort: parseInt(this.httpPort.current.value),\r\n            httpsPort: parseInt(this.httpsPort.current.value),\r\n        };\r\n        updateConfigInfo(params, (success: boolean) => {\r\n            if (!success) { alert(\"Error updating configuration\") };\r\n            this.props.logOff();\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.logOff();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <br />\r\n                <Tabs style={{width:\"99%\"}} defaultActiveKey=\"config\" id=\"main_tab\">\r\n                    <Tab eventKey=\"config\" title=\"config\">\r\n                        <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                            <div style={{ width: \"90%\", display: \"inline-block\" }}>\r\n                                <br />\r\n                                <Form onSubmit={this.updateConfig}>\r\n                                    <Card bg=\"light\" style={{ width: \"100%\", textAlign: \"left\" }}>\r\n                                        <Card.Header>\r\n                                            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n                                                <div style={{ display: \"inline-block\", textAlign: \"left\", width: \"50%\" }}>\r\n                                                    <Image roundedCircle src=\"/images/favicon.ico\" style={{ width: \"40px\", height: \"40px\", cursor: \"pointer\" }} />\r\n                                                    <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>Settings</span>\r\n                                                </div>\r\n                                                <div style={{ display: \"inline-block\", width: \"50%\", textAlign: \"right\" }}>\r\n                                                    <Form.Group>\r\n                                                        <Button onClick={() => { this.props.logOff() }} > Log Off</Button>\r\n                                                        <span style={{ visibility: \"hidden\" }}>{'  '}</span>\r\n                                                        <Button disabled={!this.state.changeConfig} type=\"submit\" >Save</Button>\r\n                                                    </Form.Group>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            <Form.Group as={Row} controlId=\"formHorizontalAdminPin\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Admin PIN\r\n                                                </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.adminPin} onChange={() => this.needSave()} placeholder=\"Admin PIN\" type=\"password\" defaultValue={this.props.config.adminPin} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formNotifications\">\r\n                                                <Col sm={{ span: 10, offset: 2 }}>\r\n                                                    <Form.Check ref={this.notifications} onChange={() => this.needSave()} label=\"Enable User Notifications\" defaultChecked={this.props.config.notifications} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formEmailUserName\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Source Email\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.emailUserName} onChange={() => this.needSave()} type=\"email\" placeholder=\"Source Email\" defaultValue={this.props.config.emailUserName} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formEmailUserPassword\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Source Email Password\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.emailUserPassword} onChange={() => this.needSave()} placeholder=\"Source Email Password\" type=\"password\" defaultValue={this.props.config.emailUserPassword} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formsmtpServer\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    SMTP Server\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.smtpServer} onChange={() => this.needSave()} placeholder=\"SMTP Server\" defaultValue={this.props.config.smtpServer} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formportNumber\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Port Number\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.portNumber} onChange={() => this.needSave()} placeholder=\"Port Number\" defaultValue={this.props.config.portNumber + \"\"} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formssl\">\r\n                                                <Col sm={{ span: 10, offset: 2 }}>\r\n                                                    <Form.Check ref={this.ssl} onChange={() => this.needSave()} label=\"SSL\" defaultChecked={this.props.config.ssl} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formdomain\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Domain\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.domain} onChange={() => this.needSave()} placeholder=\"Domain\" defaultValue={this.props.config.domain} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formemailAlias\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Email Alias\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.emailAlias} onChange={() => this.needSave()} placeholder=\"Email Alias\" defaultValue={this.props.config.emailAlias} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formappURL\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    App URL\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.appURL} onChange={() => this.needSave()} placeholder=\"App URL\" defaultValue={this.props.config.appURL} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formhttpPort\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    HTTP Port\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.httpPort} onChange={() => this.needSave()} placeholder=\"HTTP Port\" defaultValue={this.props.config.httpPort + \"\"} />\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formhttpsPort\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    HTTPS Port (Cert Required)\r\n                                            </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control ref={this.httpsPort} onChange={() => this.needSave()} placeholder=\"HTTPS Port\" defaultValue={this.props.config.httpsPort + \"\"} />\r\n                                                </Col>\r\n                                                </Form.Group>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"users\" title=\"users\">\r\n                        <div style={{ width: \"100%\", textAlign: \"center\", alignContent:\"center\" }}>\r\n                            <div style={{ width: \"90%\", display: \"inline-block\", textAlign:\"center\" }}>\r\n                                <br />\r\n                                    <Card bg=\"light\" style={{ width: \"100%\", textAlign: \"left\" }}>\r\n                                        <Card.Header>\r\n                                            <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n                                                <div style={{ display: \"inline-block\", textAlign: \"left\", width: \"50%\" }}>\r\n                                                    <Image roundedCircle src=\"/images/favicon.ico\" style={{ width: \"40px\", height: \"40px\", cursor: \"pointer\" }} />\r\n                                                    <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>Users</span>\r\n                                                </div>\r\n                                                <div style={{ display: \"inline-block\", width: \"50%\", textAlign: \"right\" }}>\r\n                                                <Form.Group>\r\n                                                    <Button onClick={() => { this.props.logOff() }} > Log Off</Button>\r\n                                                    </Form.Group>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Card.Header>\r\n                                    <br />\r\n                                    <div style={{ width: \"98%\",  alignSelf:\"Center\" }}>\r\n                                        {this.props.users.map((user: ImMonkeyData_Users, i: number) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <Card style={{ width: \"100%\" }} key={i}>\r\n                                                        <Card.Img src={\"./images/users/\" + user.user_id + \".jpg\"} />\r\n                                                        <Card.Body>\r\n                                                            <Card.Title>{user.name}</Card.Title>\r\n                                                            <Card.Text>\r\n                                                                {\"Banana count for this month: \" + emoji.emojify(\":banana:\") + \"(\" + user.banana_count + \")\"}\r\n                                                            </Card.Text>\r\n                                                            <Form  >\r\n                                                                <Form.Group as={Row} controlId=\"formUserName\">\r\n                                                                    <Form.Label column sm={2}>\r\n                                                                        User Name\r\n                                                                    </Form.Label>\r\n                                                                    <Col sm={10}>\r\n                                                                        <Form.Control ref={this.userRefs[i].name} onChange={() => {this.userChange(i) }}  placeholder=\"User Name\" defaultValue={user.name} />\r\n                                                                    </Col>\r\n                                                                </Form.Group>\r\n\r\n                                                                <Form.Group as={Row} controlId=\"formHorizontalPIN\">\r\n                                                                    <Form.Label column sm={2}>\r\n                                                                        PIN\r\n                                                                </Form.Label>\r\n                                                                    <Col sm={10}>\r\n                                                                        <Form.Control ref={this.userRefs[i].pin} onChange={() => { this.userChange(i) }}  placeholder=\"PIN\" defaultValue={user.pin} />\r\n                                                                    </Col>\r\n                                                                </Form.Group>\r\n\r\n                                                                <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n                                                                    <Col sm={{ span: 10, offset: 2 }}>\r\n                                                                        <Form.Check ref={this.userRefs[i].notify} onChange={() => { this.userChange(i) }} label=\"Grocery Monkey Notifications\" defaultChecked={user.notify} />\r\n                                                                    </Col>\r\n                                                                </Form.Group>\r\n\r\n                                                                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                                                                    <Form.Label column sm={2}>\r\n                                                                        Email\r\n                                                                </Form.Label>\r\n                                                                    <Col sm={10}>\r\n                                                                        <Form.Control ref={this.userRefs[i].email} onChange={() => { this.userChange(i) }} type=\"email\" placeholder=\"Email\" defaultValue={user.email} />\r\n                                                                    </Col>\r\n                                                                </Form.Group>\r\n\r\n                                                                <Form.Group as={Row} type=\"email\" controlId=\"formHorizontalSMS\">\r\n                                                                    <Form.Label column sm={2}>\r\n                                                                        SMS\r\n                                                                    </Form.Label>\r\n                                                                    <Col sm={10}>\r\n                                                                        <Form.Control ref={this.userRefs[i].sms} onChange={() => { this.userChange(i) }} placeholder=\"SMS\" defaultValue={user.sms} />\r\n                                                                    </Col>\r\n                                                                </Form.Group>\r\n                                                                <Button variant=\"primary\" onClick={() => { this.deleteUserData(i) }} >{\"Delete \" + user.name}</Button>\r\n                                                                <span style={{ visibility: \"hidden\" }}>{'    '}</span>\r\n                                                                <Button variant=\"primary\" onClick={() => { this.updateUserInfo(i) }} disabled={!this.state.userChange[i]}>Save Changes</Button>\r\n                                                            </Form>\r\n                                                            \r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                    <br />\r\n                                                </>\r\n                                            )\r\n                                        })}\r\n                                        <Card style={{ width: \"100%\" }} >\r\n                                            <Card.Img src={\"./images/users/new_user.png\"} />\r\n                                            <Card.Body>\r\n                                                <Card.Title>New User</Card.Title>\r\n                                                <Form  >\r\n                                                    <Form.Group as={Row} controlId=\"formUserName\">\r\n                                                        <Form.Label column sm={2}>\r\n                                                            User Name\r\n                                                                    </Form.Label>\r\n                                                        <Col sm={10}>\r\n                                                            <Form.Control ref={this.newName} onChange={() => { this.setState(() => ({ newChange: true })) }}  placeholder=\"User Name\"  />\r\n                                                        </Col>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Row} controlId=\"formHorizontalPIN\">\r\n                                                        <Form.Label column sm={2}>\r\n                                                            PIN\r\n                                                                </Form.Label>\r\n                                                        <Col sm={10}>\r\n                                                            <Form.Control ref={this.newPIN} onChange={() => { this.setState(() => ({ newChange: true })) } } placeholder=\"PIN\"  />\r\n                                                        </Col>\r\n                                                    </Form.Group>\r\n                                                    <Button variant=\"primary\" onClick={() => { this.newUser() }} disabled={!this.state.newChange}>Add User</Button>\r\n                                                </Form>\r\n\r\n                                            </Card.Body>\r\n                                        </Card>\r\n\r\n\r\n                                    </div>\r\n                                </Card>\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"items\" title=\"item\">\r\n                        <div style={{ width: \"100%\", textAlign: \"center\", alignContent: \"center\" }}>\r\n                            <div style={{ width: \"90%\", display: \"inline-block\" }}>\r\n                                <br />\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n                                            <div style={{ display: \"inline-block\", textAlign: \"left\", width: \"60%\" }}>\r\n                                                <Image roundedCircle src=\"/images/favicon.ico\" style={{ width: \"40px\", height: \"40px\", cursor: \"pointer\" }} />\r\n                                                <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>Item Cleanup</span>\r\n                                            </div>\r\n                                            <div style={{ display: \"inline-block\", width: \"40%\", textAlign: \"right\" }}>\r\n                                                <Form.Group>\r\n                                                    <Button onClick={() => { this.props.logOff() }} > Log Off</Button>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card.Header>\r\n                                </Card>\r\n                                <ItemCleanup isAuthenticated={this.props.isAuthenticated} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"emojis\" title=\"emoji\">\r\n                        <div style={{ width: \"100%\", textAlign: \"center\", alignContent: \"center\" }}>\r\n                            <div style={{ width: \"90%\", display: \"inline-block\" }}>\r\n                                <br />\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n                                            <div style={{ display: \"inline-block\", textAlign: \"left\", width: \"60%\" }}>\r\n                                                <Image roundedCircle src=\"/images/favicon.ico\" style={{ width: \"40px\", height: \"40px\", cursor: \"pointer\" }} />\r\n                                                <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>emoji Lookup</span>\r\n                                            </div>\r\n                                            <div style={{ display: \"inline-block\", width: \"40%\", textAlign: \"right\" }}>\r\n                                                <Form.Group>\r\n                                                    <Button onClick={() => { this.props.logOff() }} > Log Off</Button>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card.Header>\r\n                                </Card>\r\n                                <EmojiKeyPair />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                    <Tab eventKey=\"verbs\" title=\"verb\">\r\n                        <div style={{ width: \"100%\", textAlign: \"center\", alignContent: \"center\" }}>\r\n                            <div style={{ width: \"90%\", display: \"inline-block\" }}>\r\n                                <br />\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <div style={{ width: \"100%\", display: \"inline-block\" }}>\r\n                                            <div style={{ display: \"inline-block\", textAlign: \"left\", width: \"60%\" }}>\r\n                                                <Image roundedCircle src=\"/images/favicon.ico\" style={{ width: \"40px\", height: \"40px\", cursor: \"pointer\" }} />\r\n                                                <span style={{ visibility: \"hidden\" }}>X</span><span style={{ fontWeight: \"bold\" }}>verb Config</span>\r\n                                            </div>\r\n                                            <div style={{ display: \"inline-block\", width: \"40%\", textAlign: \"right\" }}>\r\n                                                <Form.Group>\r\n                                                    <Button onClick={() => { this.props.logOff() }} > Log Off</Button>\r\n                                                </Form.Group>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card.Header>\r\n                                </Card>\r\n                                <ItemsVerbs isAuthenticated={this.props.isAuthenticated} />\r\n                            </div>\r\n                        </div>\r\n                    </Tab>\r\n                </Tabs>\r\n            </>\r\n    )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Config;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, BrowserRouter as Router, Redirect, BrowserRouterProps } from 'react-router-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nimport Splash from './components/splash';\r\nimport Main from './components/main';\r\nimport User from './components/user';\r\nimport Config from './components/config';\r\n\r\nimport { validatePin, updateUser, getConfigInfo, getUsers } from './functions/fetchfunctions';\r\nimport { ImMonkeyData_Users, ImConfig, shared_Key } from './constants/constants';\r\n\r\n\r\ninterface IMyPropsInterface {\r\n    autoPIN: string;\r\n}\r\n\r\ninterface IMyStateInterface {\r\n    auth: boolean;\r\n    user: ImMonkeyData_Users;\r\n    isAdmin: boolean;\r\n    tryautoPIN: boolean;\r\n    config?: ImConfig;\r\n    users?: Array<ImMonkeyData_Users>;\r\n};\r\n\r\ninterface PrivateRouteProps extends BrowserRouterProps {\r\n    component: React.ReactType;\r\n    path: string;\r\n    isAuthenticated: boolean;\r\n    authenticatePin?: Function;\r\n    user?: ImMonkeyData_Users;\r\n    isAdmin?: boolean;\r\n    logOff?: Function;\r\n    updateUser?: Function;\r\n    config?: ImConfig;\r\n    users?: Array<ImMonkeyData_Users>;\r\n    getUserData?: Function;\r\n};\r\n\r\nconst PrivateRoute: React.SFC<PrivateRouteProps> = (props: PrivateRouteProps) => {\r\n    const { component: Component, ...rest } = props;\r\n    return (\r\n        <Route {...rest} render={() => (\r\n            props.isAuthenticated === true\r\n                ? <Component {...props} />\r\n                : <Redirect to='/' />\r\n        )} />\r\n    )\r\n};\r\n\r\n\r\nclass AppContainer extends React.Component<IMyPropsInterface, IMyStateInterface> {\r\n    constructor(props: IMyPropsInterface) {\r\n        super(props);\r\n        this.state = {\r\n            auth: false,\r\n            user: {\r\n                user_id: 0,\r\n                name: '',\r\n            },\r\n            isAdmin: false,\r\n            tryautoPIN: true,\r\n        }\r\n        this.authenticatePin = this.authenticatePin.bind(this);\r\n        this.logOff = this.logOff.bind(this);\r\n        this.updateUser = this.updateUser.bind(this);\r\n        this.getUserData = this.getUserData.bind(this);\r\n    }\r\n\r\n    logOff():void {\r\n        this.setState(() => {\r\n            return {\r\n                auth: false,\r\n                isAdmin:false,\r\n            }\r\n        })\r\n    }\r\n\r\n    authenticatePin(pin: string, callback: Function): void {\r\n        const userAuth = (authFlag: boolean, user: ImMonkeyData_Users) => {\r\n            getConfigInfo((configJSON: ImConfig) => {\r\n                getUsers((userJSON: Array<ImMonkeyData_Users>) => {\r\n                    this.setState(() => ({\r\n                        auth: authFlag,\r\n                        user: user,\r\n                        isAdmin: (user.user_id === -1),\r\n                        config: configJSON,\r\n                        users: userJSON,\r\n                    }))\r\n                    callback(authFlag);\r\n                })\r\n            })\r\n        }\r\n        validatePin(pin, userAuth.bind(this));\r\n    }\r\n\r\n    updateUser(params: ImMonkeyData_Users, callback: Function): void {\r\n        const updateUserCB = (newUser: ImMonkeyData_Users): void => {\r\n            this.setState(() => { return { user: newUser } });\r\n            callback();\r\n        }\r\n        updateUser(params, updateUserCB.bind(this));\r\n    }\r\n\r\n    getUserData(callback: Function): void {\r\n        getUsers((userJson: Array<ImMonkeyData_Users>) => {\r\n            this.setState(() => ({ users: userJson }), callback());\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Router>\r\n                <Route exact path=\"/\" render={() => (<Splash autoPIN={this.props.autoPIN} tryautoPIN={this.state.tryautoPIN} change_tryautoPIN={() => { this.setState(() => ({tryautoPIN:false}))}} isAuthenticated={this.state.auth} authenticatePin={this.authenticatePin} isAdmin={this.state.isAdmin} logOff={this.logOff}/>)} />\r\n                <PrivateRoute path=\"/config\" component={Config} isAuthenticated={this.state.auth} isAdmin={this.state.isAdmin} logOff={this.logOff} config={this.state.config} users={this.state.users} getUserData={this.getUserData}/>\r\n                <PrivateRoute path=\"/main\" component={Main} isAuthenticated={this.state.auth} user={this.state.user} logOff={this.logOff} />\r\n                <PrivateRoute path=\"/user\" component={User} isAuthenticated={this.state.auth} user={this.state.user} updateUser={this.updateUser} />\r\n            </Router>\r\n            )\r\n        }\r\n}\r\n\r\n\r\nfunction getAutoPIN(): string {\r\n    let returnPIN: string  = '';\r\n    let HTMLheadElement: HTMLElement = document.getElementsByName('m_auth')[0];\r\n    if (HTMLheadElement) {\r\n        let m_auth_attempt: string | null = HTMLheadElement.getAttribute('content');\r\n        if (m_auth_attempt) {\r\n            if (parseInt(m_auth_attempt)) {\r\n                let m_auth_pin: string = parseInt(m_auth_attempt) ? (parseInt(m_auth_attempt) % shared_Key).toString() : ''\r\n                if (m_auth_pin) { returnPIN = m_auth_pin };\r\n            }\r\n        }\r\n    }\r\n    return returnPIN;\r\n};\r\n\r\nReactDOM.render(<AppContainer autoPIN={getAutoPIN()} />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}